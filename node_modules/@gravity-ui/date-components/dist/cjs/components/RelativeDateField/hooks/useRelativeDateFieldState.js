"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRelativeDateFieldState = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const date_utils_1 = require("@gravity-ui/date-utils");
const uikit_1 = require("@gravity-ui/uikit");
function useRelativeDateFieldState(props) {
    var _a;
    const [value, setValue] = (0, uikit_1.useControlledState)(props.value, (_a = props.defaultValue) !== null && _a !== void 0 ? _a : null, props.onUpdate);
    const [text, setText] = react_1.default.useState(value !== null && value !== void 0 ? value : '');
    if (value && value !== text) {
        setText(value);
    }
    const handleTextChange = (t) => {
        if (props.disabled || props.readOnly) {
            return;
        }
        setText(t);
        if (isLikeRelativeDate(t)) {
            const date = (0, date_utils_1.dateTimeParse)(t);
            if (date && (0, date_utils_1.isValid)(date)) {
                setValue(t);
            }
            else {
                setValue(null);
            }
        }
        else {
            setValue(null);
        }
    };
    const parsedDate = react_1.default.useMemo(() => {
        var _a;
        if (!value) {
            return null;
        }
        return (_a = (0, date_utils_1.dateTimeParse)(value, { timeZone: props.timeZone, roundUp: props.roundUp })) !== null && _a !== void 0 ? _a : null;
    }, [value, props.timeZone]);
    const [lastCorrectDate, setLastCorrectDate] = react_1.default.useState(parsedDate);
    if (parsedDate && parsedDate !== lastCorrectDate) {
        setLastCorrectDate(parsedDate);
    }
    const validationState = props.validationState || (text && !parsedDate) ? 'invalid' : undefined;
    return {
        value,
        setValue(v) {
            if (props.disabled || props.readOnly) {
                return;
            }
            setValue(v);
        },
        text,
        setText: handleTextChange,
        parsedDate,
        lastCorrectDate,
        validationState,
        disabled: props.disabled,
        readOnly: props.readOnly,
    };
}
exports.useRelativeDateFieldState = useRelativeDateFieldState;
function isLikeRelativeDate(text) {
    return /^now/i.test(text);
}
