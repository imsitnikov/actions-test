"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelativeDateField = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = tslib_1.__importDefault(require("react"));
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../utils/cn");
const Calendar_1 = require("../Calendar");
const DateField_1 = require("../DateField");
const useRelativeDateFieldProps_1 = require("./hooks/useRelativeDateFieldProps");
const useRelativeDateFieldState_1 = require("./hooks/useRelativeDateFieldState");
require("./RelativeDateField.css");
const b = (0, cn_1.block)('relative-date-field');
function RelativeDateField(props) {
    var _a;
    const state = (0, useRelativeDateFieldState_1.useRelativeDateFieldState)(props);
    const { inputProps, calendarProps, timeInputProps } = (0, useRelativeDateFieldProps_1.useRelativeDateFieldProps)(state, props);
    const isMobile = (0, uikit_1.useMobile)();
    const anchorRef = react_1.default.useRef(null);
    const [isOpen, setOpen] = react_1.default.useState(false);
    const { focusWithinProps } = (0, uikit_1.useFocusWithin)({
        onBlurWithin: () => {
            setOpen(false);
        },
        isDisabled: isMobile,
    });
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ role: "group", className: b(null, props.className), style: props.style }, focusWithinProps, { children: [(0, jsx_runtime_1.jsx)(uikit_1.TextInput, Object.assign({}, inputProps, { className: b('field'), ref: anchorRef, onFocus: (e) => {
                    var _a;
                    if (!isMobile) {
                        setOpen(true);
                    }
                    (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);
                }, onBlur: props.onBlur })), (0, jsx_runtime_1.jsx)("input", { type: "text", hidden: true, name: props.name, value: (_a = state.value) !== null && _a !== void 0 ? _a : '', 
                // Ignore React warning
                onChange: () => { } }), !isMobile && ((0, jsx_runtime_1.jsx)(uikit_1.Popup, { anchorRef: anchorRef, open: isOpen, children: (0, jsx_runtime_1.jsxs)("div", { className: b('popup-content'), children: [(0, jsx_runtime_1.jsx)(Calendar_1.Calendar, Object.assign({}, calendarProps)), props.hasTime ? ((0, jsx_runtime_1.jsx)("div", { className: b('time-field-wrapper'), children: (0, jsx_runtime_1.jsx)(DateField_1.DateField, Object.assign({ className: b('time-field') }, timeInputProps)) })) : null] }) }))] })));
}
exports.RelativeDateField = RelativeDateField;
