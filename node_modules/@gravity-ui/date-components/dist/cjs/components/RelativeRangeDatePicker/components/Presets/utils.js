"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterPresetTabs = exports.getDefaultPresetTabs = exports.filterPresets = exports.getPresetTitle = void 0;
const date_utils_1 = require("@gravity-ui/date-utils");
const defaultPresets_1 = require("./defaultPresets");
const i18n_1 = require("./i18n");
function getPresetTitle(start, end, presets = defaultPresets_1.allPresets) {
    const startText = start.replace(/\s+/g, '');
    const endText = end.replace(/\s+/g, '');
    for (const preset of presets) {
        if (preset.from === startText && preset.to === endText) {
            return preset.title;
        }
    }
    if (end === 'now') {
        const match = /^now-(\d+)([m|h|d|w|M|y])$/.exec(start);
        if (match) {
            const [, count, unit] = match;
            if (isDateUnit(unit)) {
                return (0, i18n_1.i18n)('Last {count} {unit}', {
                    count,
                    unit: (0, i18n_1.i18n)(unit, { count: Number(count) }),
                });
            }
        }
    }
    return startText + ' â€” ' + endText;
}
exports.getPresetTitle = getPresetTitle;
function isDateUnit(value) {
    return ['m', 'h', 'd', 'w', 'M', 'y'].includes(value);
}
function filterPresets(presets, minValue) {
    return presets.filter((preset) => {
        const from = (0, date_utils_1.dateTimeParse)(preset.from);
        const to = (0, date_utils_1.dateTimeParse)(preset.to, { roundUp: true });
        if (!from || !to) {
            return false;
        }
        if (to.isBefore(from)) {
            return false;
        }
        if (minValue && from.isBefore(minValue)) {
            return false;
        }
        return true;
    });
}
exports.filterPresets = filterPresets;
function getDefaultPresetTabs({ withTime, minValue, }) {
    const tabs = [];
    const mainTab = {
        id: 'main',
        title: (0, i18n_1.i18n)('Main'),
        presets: [],
    };
    const mainPresets = defaultPresets_1.DEFAULT_DATE_PRESETS;
    if (withTime) {
        mainPresets.unshift(...defaultPresets_1.DEFAULT_TIME_PRESETS);
    }
    mainTab.presets = filterPresets(mainPresets, minValue);
    if (mainTab.presets.length > 0) {
        tabs.push(mainTab);
    }
    const otherTab = {
        id: 'other',
        title: (0, i18n_1.i18n)('Other'),
        presets: filterPresets(defaultPresets_1.DEFAULT_OTHERS_PRESETS, minValue),
    };
    if (otherTab.presets.length > 0) {
        tabs.push(otherTab);
    }
    return tabs;
}
exports.getDefaultPresetTabs = getDefaultPresetTabs;
function filterPresetTabs(tabs, { minValue } = {}) {
    return tabs.reduce((acc, tab) => {
        const presets = filterPresets(tab.presets, minValue);
        if (presets.length) {
            acc.push(Object.assign(Object.assign({}, tab), { presets }));
        }
        return acc;
    }, []);
}
exports.filterPresetTabs = filterPresetTabs;
