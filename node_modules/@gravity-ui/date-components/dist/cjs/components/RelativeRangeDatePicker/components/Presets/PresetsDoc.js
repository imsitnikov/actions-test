"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PresetsDoc = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = tslib_1.__importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../../../utils/cn");
const getButtonSizeForInput_1 = require("../../../utils/getButtonSizeForInput");
const i18n_1 = require("./i18n");
require("./PresetsDoc.css");
const b = (0, cn_1.block)('relative-range-date-picker-presets-doc');
const columns = [
    {
        id: 'title',
        name: () => {
            return (0, i18n_1.i18n)('Range');
        },
    },
    {
        id: 'from',
        name: () => {
            return (0, i18n_1.i18n)('From');
        },
    },
    {
        id: 'to',
        name: () => {
            return (0, i18n_1.i18n)('To');
        },
    },
];
const data = [
    {
        get title() {
            return (0, i18n_1.i18n)('Last 5 minutes');
        },
        from: 'now — 5m',
        to: 'now',
    },
    {
        get title() {
            return (0, i18n_1.i18n)('From start of day');
        },
        from: 'now/d',
        to: 'now',
    },
    {
        get title() {
            return (0, i18n_1.i18n)('This week');
        },
        from: 'now/w',
        to: 'now/w',
    },
    {
        get title() {
            return (0, i18n_1.i18n)('From start of week');
        },
        from: 'now/w',
        to: 'now',
    },
    {
        get title() {
            return (0, i18n_1.i18n)('Previous month');
        },
        from: 'now — 1M/M',
        to: 'now — 1M/M',
    },
];
function PresetsExamples({ size }) {
    return (0, jsx_runtime_1.jsx)(uikit_1.Table, { columns: columns, data: data, className: b('table', { size }) });
}
function DesktopDoc({ className, size }) {
    return ((0, jsx_runtime_1.jsx)(uikit_1.Popover, { className: b(null, className), tooltipContentClassName: b('content'), hasArrow: false, content: (0, jsx_runtime_1.jsx)(PresetsExamples, { size: size }), children: (0, jsx_runtime_1.jsx)(uikit_1.Button, { className: b('button'), view: "flat-secondary", size: (0, getButtonSizeForInput_1.getButtonSizeForInput)(size), children: (0, jsx_runtime_1.jsx)(uikit_1.Icon, { data: icons_1.CircleQuestion }) }) }));
}
function MobileDoc({ className, size }) {
    const [open, setOpen] = react_1.default.useState(false);
    return ((0, jsx_runtime_1.jsxs)("div", { className: b(null, className), children: [(0, jsx_runtime_1.jsx)(uikit_1.Button, { className: b('button'), view: "flat-secondary", size: "l", onClick: () => {
                    setOpen(true);
                }, children: (0, jsx_runtime_1.jsx)(uikit_1.Icon, { data: icons_1.CircleQuestion }) }), (0, jsx_runtime_1.jsx)(uikit_1.Sheet, { visible: open, onClose: () => setOpen(false), children: (0, jsx_runtime_1.jsx)(PresetsExamples, { size: size }) })] }));
}
function PresetsDoc({ className, size }) {
    const isMobile = (0, uikit_1.useMobile)();
    if (isMobile) {
        return (0, jsx_runtime_1.jsx)(MobileDoc, { className: className, size: size });
    }
    return (0, jsx_runtime_1.jsx)(DesktopDoc, { className: className, size: size });
}
exports.PresetsDoc = PresetsDoc;
