"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zones = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const date_utils_1 = require("@gravity-ui/date-utils");
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../../../utils/cn");
const utils_1 = require("../../utils");
const i18n_1 = require("./i18n");
require("./Zones.css");
const groups = {};
const zones = (0, date_utils_1.getTimeZonesList)().reduce((opts, value) => {
    const [groupName] = value.split('/');
    if (groupName) {
        let group = groups[groupName];
        if (!group) {
            group = { label: groupName, options: [] };
            groups[groupName] = group;
            opts.push(group);
        }
        group.options.push({ value });
    }
    return opts;
}, []);
zones.unshift({
    value: 'UTC',
});
zones.unshift({
    value: 'system',
    get content() {
        return (0, i18n_1.i18n)('system');
    },
});
zones.unshift({
    value: 'default',
    get content() {
        return (0, i18n_1.i18n)('default');
    },
});
const b = (0, cn_1.block)('relative-range-date-picker-zones');
function Zones(props) {
    const timeZone = (0, utils_1.normalizeTimeZone)(props.value);
    const size = props.isMobile ? 'xl' : props.size;
    return ((0, jsx_runtime_1.jsx)(uikit_1.Select, { value: [timeZone], options: zones, size: size, onUpdate: (v) => {
            const tz = v[0];
            if (tz) {
                props.onUpdate(tz);
            }
        }, width: "max", renderControl: (controlProps) => {
            const value = timeZone === 'system' || timeZone === 'default' ? (0, i18n_1.i18n)(timeZone) : timeZone;
            return ((0, jsx_runtime_1.jsxs)(uikit_1.Button, { onClick: controlProps.onClick, ref: controlProps.ref, view: "flat-secondary", width: "max", pin: "clear-clear", size: size, extraProps: {
                    'aria-haspopup': 'listbox',
                    'aria-expanded': controlProps.open,
                    onKeyDown: controlProps.onKeyDown,
                }, className: b('control'), children: [`${value} (${(0, utils_1.getTimeZoneOffset)(timeZone)})`, (0, jsx_runtime_1.jsx)(uikit_1.Icon, { className: b('control-icon'), data: icons_1.ChevronRight, size: props.isMobile ? 20 : 16 })] }));
        }, renderOption: ({ value, content }) => {
            const v = content !== null && content !== void 0 ? content : value;
            return ((0, jsx_runtime_1.jsxs)("span", { className: b('item'), children: [(0, jsx_runtime_1.jsxs)("span", { className: b('item-title'), title: value, children: [v, "\u00A0"] }), (0, jsx_runtime_1.jsx)(uikit_1.Text, { color: "secondary", children: (0, utils_1.getTimeZoneOffset)(value) })] }));
        }, filterable: true }));
}
exports.Zones = Zones;
