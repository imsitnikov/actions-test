"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SIZE_TO_ITEM_HEIGHT = exports.Presets = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = tslib_1.__importDefault(require("react"));
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../../../utils/cn");
const PresetsDoc_1 = require("./PresetsDoc");
const utils_1 = require("./utils");
require("./Presets.css");
const b = (0, cn_1.block)('relative-range-date-picker-presets');
function Presets({ className, size = 'm', minValue, withTime, onChoosePreset, presetTabs, }) {
    var _a, _b;
    const tabs = react_1.default.useMemo(() => {
        return (0, utils_1.filterPresetTabs)(presetTabs !== null && presetTabs !== void 0 ? presetTabs : (0, utils_1.getDefaultPresetTabs)({ withTime }), { minValue });
    }, [withTime, minValue, presetTabs]);
    const [activeTabId, setActiveTab] = react_1.default.useState((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id);
    if (tabs.length === 0) {
        return null;
    }
    const activeTab = (_b = tabs.find((tab) => tab.id === activeTabId)) !== null && _b !== void 0 ? _b : tabs[0];
    if (!activeTab) {
        return null;
    }
    if (activeTab.id !== activeTabId) {
        setActiveTab(activeTab.id);
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: b({ size }, className), children: [(0, jsx_runtime_1.jsxs)("div", { className: b('tabs'), children: [(0, jsx_runtime_1.jsx)(uikit_1.Tabs, { activeTab: activeTabId, onSelectTab: setActiveTab, items: tabs, size: size === 's' ? 'm' : size }), (0, jsx_runtime_1.jsx)(PresetsDoc_1.PresetsDoc, { className: b('doc'), size: size })] }), (0, jsx_runtime_1.jsx)("div", { className: b('content'), children: (0, jsx_runtime_1.jsx)(PresetsList, { presets: activeTab.presets, onChoosePreset: onChoosePreset, size: size }) })] }));
}
exports.Presets = Presets;
exports.SIZE_TO_ITEM_HEIGHT = {
    s: 28,
    m: 28,
    l: 32,
    xl: 36,
};
function PresetsList({ presets, onChoosePreset, size = 'm' }) {
    const ref = react_1.default.useRef(null);
    react_1.default.useEffect(() => {
        var _a, _b;
        const list = ref.current;
        const container = (_b = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.refContainer.current) === null || _b === void 0 ? void 0 : _b.node;
        if (list && container) {
            try {
                container.setAttribute('tabindex', '0');
                container.setAttribute('class', b('list-container'));
                const handleFocus = () => {
                    if (list.getActiveItem() === null) {
                        list.activateItem(0, true);
                    }
                };
                container.addEventListener('focus', handleFocus);
                return () => {
                    container.removeEventListener('focus', handleFocus);
                };
            }
            catch (_c) {
                // Oooops
            }
        }
        return undefined;
    }, []);
    return ((0, jsx_runtime_1.jsx)(uikit_1.List, { ref: ref, className: b('list'), itemClassName: b('item'), items: presets, filterable: false, virtualized: false, renderItem: (item) => item.title, itemHeight: exports.SIZE_TO_ITEM_HEIGHT[size], onItemClick: (item) => {
            onChoosePreset(item.from, item.to);
        } }));
}
