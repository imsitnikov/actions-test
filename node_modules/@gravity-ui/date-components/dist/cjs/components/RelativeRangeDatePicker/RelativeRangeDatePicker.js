"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelativeRangeDatePicker = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = tslib_1.__importDefault(require("react"));
const date_utils_1 = require("@gravity-ui/date-utils");
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../utils/cn");
const getButtonSizeForInput_1 = require("../utils/getButtonSizeForInput");
const PickerDialog_1 = require("./components/PickerDialog/PickerDialog");
const useRelativeRangeDatePickerState_1 = require("./hooks/useRelativeRangeDatePickerState");
const i18n_1 = require("./i18n");
const utils_1 = require("./utils");
require("./RelativeRangeDatePicker.css");
const b = (0, cn_1.block)('relative-range-date-picker');
function RelativeRangeDatePicker(props) {
    var _a, _b;
    const state = (0, useRelativeRangeDatePickerState_1.useRelativeRangeDatePickerState)(props);
    const isMobile = (0, uikit_1.useMobile)();
    const anchorRef = react_1.default.useRef(null);
    const inputRef = react_1.default.useRef(null);
    const [isActive, setIsActive] = react_1.default.useState(false);
    const [open, setOpen] = react_1.default.useState(false);
    const { focusWithinProps } = (0, uikit_1.useFocusWithin)({
        isDisabled: props.disabled || isMobile,
        onFocusWithinChange: (isFocusedWithin) => {
            if (!isFocusedWithin) {
                setIsActive(false);
            }
        },
    });
    const { alwaysShowAsAbsolute, presetTabs, getRangeTitle } = props;
    const format = (_a = props.format) !== null && _a !== void 0 ? _a : 'L';
    const text = react_1.default.useMemo(() => typeof getRangeTitle === 'function'
        ? getRangeTitle(state.value, state.timeZone)
        : (0, utils_1.getDefaultTitle)({
            value: state.value,
            timeZone: state.timeZone,
            alwaysShowAsAbsolute: alwaysShowAsAbsolute,
            format,
            presets: presetTabs === null || presetTabs === void 0 ? void 0 : presetTabs.flatMap(({ presets }) => presets),
        }), [alwaysShowAsAbsolute, format, getRangeTitle, presetTabs, state.timeZone, state.value]);
    const validationState = props.validationState || (state.isInvalid ? 'invalid' : undefined);
    const errorMessage = (_b = props.errorMessage) !== null && _b !== void 0 ? _b : state.errors.join('\n');
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ ref: anchorRef }, focusWithinProps, { className: b(null, props.className), style: props.style, children: [(0, jsx_runtime_1.jsx)(uikit_1.Popover, { className: b('value-label'), tooltipContentClassName: b('value-label-tooltip'), disabled: isMobile || open || !state.value, delayOpening: 500, placement: ['right', 'right-start', 'right-end', 'auto'], hasArrow: false, content: (0, jsx_runtime_1.jsx)(ValueLabel, { value: state.value, format: format, timeZone: state.timeZone }), children: (0, jsx_runtime_1.jsx)(uikit_1.TextInput, { controlRef: inputRef, value: text, placeholder: props.placeholder, onUpdate: (v) => {
                        if (!props.readOnly && !v) {
                            state.setValue(null, 'default');
                        }
                    }, controlProps: {
                        'aria-haspopup': 'dialog',
                        'aria-expanded': open,
                        disabled: isMobile,
                        className: b('input', { mobile: isMobile }),
                    }, onKeyDown: (e) => {
                        if (props.disabled) {
                            return;
                        }
                        if (e.altKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp')) {
                            e.preventDefault();
                            setOpen(true);
                        }
                    }, onFocus: () => {
                        if (!isActive) {
                            setIsActive(true);
                            setOpen(true);
                        }
                    }, validationState: validationState, errorMessage: errorMessage, errorPlacement: props.errorPlacement, pin: props.pin, size: props.size, label: props.label, hasClear: props.hasClear, disabled: props.disabled, endContent: (0, jsx_runtime_1.jsx)(uikit_1.Button, { view: "flat-secondary", size: (0, getButtonSizeForInput_1.getButtonSizeForInput)(props.size), disabled: props.disabled, extraProps: {
                            'aria-haspopup': 'dialog',
                            'aria-expanded': open,
                        }, onClick: () => {
                            setIsActive(true);
                            setOpen(!open);
                        }, children: (0, jsx_runtime_1.jsx)(uikit_1.Icon, { data: icons_1.Calendar }) }) }) }), isMobile ? ((0, jsx_runtime_1.jsx)("button", { className: b('mobile-trigger', {
                    'has-clear': Boolean(props.hasClear && state.value),
                    'has-errors': state.isInvalid && props.errorPlacement === 'inside',
                    size: props.size,
                }), onClick: () => {
                    setIsActive(true);
                    setOpen(true);
                } })) : null, (0, jsx_runtime_1.jsx)(PickerDialog_1.PickerDialog, { state: state, props: props, open: open, onClose: () => {
                    setOpen(false);
                }, anchorRef: anchorRef, isMobile: isMobile, className: props.className })] })));
}
exports.RelativeRangeDatePicker = RelativeRangeDatePicker;
function ValueLabel({ value, format, timeZone }) {
    var _a, _b, _c, _d;
    return ((0, jsx_runtime_1.jsxs)("div", { className: b('value-label-content'), children: [(0, jsx_runtime_1.jsx)("span", { className: b('value-label-item'), children: (_b = (0, date_utils_1.dateTimeParse)((_a = value === null || value === void 0 ? void 0 : value.start) === null || _a === void 0 ? void 0 : _a.value, { timeZone })) === null || _b === void 0 ? void 0 : _b.format(format) }), (0, jsx_runtime_1.jsx)("span", { className: b('value-label-to'), children: (0, i18n_1.i18n)('to') }), (0, jsx_runtime_1.jsx)("span", { className: b('value-label-item'), children: (_d = (0, date_utils_1.dateTimeParse)((_c = value === null || value === void 0 ? void 0 : value.end) === null || _c === void 0 ? void 0 : _c.value, { timeZone, roundUp: true })) === null || _d === void 0 ? void 0 : _d.format(format) }), timeZone && (0, jsx_runtime_1.jsx)("span", { className: b('value-label-tz'), children: timeZone })] }));
}
