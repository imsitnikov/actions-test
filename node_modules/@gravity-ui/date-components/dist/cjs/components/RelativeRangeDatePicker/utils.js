"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultTitle = exports.getTimeZoneOffset = exports.normalizeTimeZone = exports.resolveTimeZone = void 0;
const date_utils_1 = require("@gravity-ui/date-utils");
const utils_1 = require("./components/Presets/utils");
function resolveTimeZone(timeZone) {
    if (timeZone === 'default' || timeZone === 'system') {
        return (0, date_utils_1.dateTime)({ timeZone }).timeZone();
    }
    return timeZone;
}
exports.resolveTimeZone = resolveTimeZone;
function normalizeTimeZone(timeZone) {
    const lowered = timeZone.toLowerCase();
    if (lowered === 'default' || lowered === 'system') {
        return lowered;
    }
    return resolveTimeZone(timeZone);
}
exports.normalizeTimeZone = normalizeTimeZone;
function getTimeZoneOffset(timeZone) {
    return `UTC ${(0, date_utils_1.dateTime)({ timeZone }).format('Z')}`;
}
exports.getTimeZoneOffset = getTimeZoneOffset;
function getDefaultTitle({ value, timeZone, alwaysShowAsAbsolute, format = 'L', presets, }) {
    var _a, _b, _c, _d, _e, _f;
    if (!value) {
        return '';
    }
    const tz = timeZone === 'system' ? '' : ` (${getTimeZoneOffset(timeZone)})`;
    let from = '';
    if (value.start) {
        from =
            value.start.type === 'relative' && !alwaysShowAsAbsolute
                ? value.start.value
                : (_b = (_a = (0, date_utils_1.dateTimeParse)(value.start.value, { timeZone })) === null || _a === void 0 ? void 0 : _a.format(format)) !== null && _b !== void 0 ? _b : '';
    }
    let to = '';
    if (value.end) {
        to =
            value.end.type === 'relative' && !alwaysShowAsAbsolute
                ? value.end.value
                : (_d = (_c = (0, date_utils_1.dateTimeParse)(value.end.value, { timeZone, roundUp: true })) === null || _c === void 0 ? void 0 : _c.format(format)) !== null && _d !== void 0 ? _d : '';
    }
    if (!alwaysShowAsAbsolute &&
        ((_e = value.start) === null || _e === void 0 ? void 0 : _e.type) === 'relative' &&
        ((_f = value.end) === null || _f === void 0 ? void 0 : _f.type) === 'relative') {
        return `${(0, utils_1.getPresetTitle)(value.start.value, value.end.value, presets)}${tz}`;
    }
    const delimiter = ' â€” ';
    return `${from}${delimiter}${to}${tz}`;
}
exports.getDefaultTitle = getDefaultTitle;
