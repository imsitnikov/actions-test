"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDatePickerProps = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const uikit_1 = require("@gravity-ui/uikit");
const DateField_1 = require("../../DateField");
const getButtonSizeForInput_1 = require("../../utils/getButtonSizeForInput");
const mergeProps_1 = require("../../utils/mergeProps");
const i18n_1 = require("../i18n");
function useDatePickerProps(state, _a) {
    var { onFocus, onBlur } = _a, props = tslib_1.__rest(_a, ["onFocus", "onBlur"]);
    const [isActive, setActive] = react_1.default.useState(false);
    const { focusWithinProps } = (0, uikit_1.useFocusWithin)({
        onFocusWithin: onFocus,
        onBlurWithin: onBlur,
        onFocusWithinChange(isFocusWithin) {
            setActive(isFocusWithin);
            if (!isFocusWithin) {
                state.setOpen(false);
            }
        },
    });
    const { inputProps } = (0, DateField_1.useDateFieldProps)(state.dateFieldState, props);
    const inputRef = react_1.default.useRef(null);
    const handleRef = (0, uikit_1.useForkRef)(inputRef, inputProps.controlRef);
    const calendarRef = react_1.default.useRef(null);
    const calendarButtonRef = react_1.default.useRef(null);
    const groupRef = react_1.default.useRef(null);
    function focusInput() {
        setTimeout(() => {
            var _a;
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        });
    }
    return {
        groupProps: Object.assign(Object.assign({ ref: groupRef, tabIndex: -1, role: 'group' }, focusWithinProps), { style: props.style, 'aria-disabled': state.disabled || undefined, onKeyDown: (e) => {
                if (e.altKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp')) {
                    e.preventDefault();
                    e.stopPropagation();
                    state.setOpen(true);
                }
            } }),
        fieldProps: (0, mergeProps_1.mergeProps)(inputProps, state.dateFieldState.isEmpty && !isActive && props.placeholder
            ? { value: '' }
            : undefined, { controlRef: handleRef }),
        calendarButtonProps: {
            ref: calendarButtonRef,
            size: (0, getButtonSizeForInput_1.getButtonSizeForInput)(props.size),
            disabled: state.disabled,
            extraProps: {
                'aria-label': (0, i18n_1.i18n)('Calendar'),
                'aria-haspopup': 'dialog',
                'aria-expanded': state.isOpen,
            },
            view: 'flat-secondary',
            onClick: () => {
                setActive(true);
                state.setOpen(!state.isOpen);
            },
        },
        popupProps: {
            open: state.isOpen,
            onEscapeKeyDown: () => {
                state.setOpen(false);
                focusInput();
            },
            onOutsideClick: (e) => {
                var _a;
                if (e.target !== calendarButtonRef.current) {
                    state.setOpen(false);
                }
                if (e.target && ((_a = groupRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {
                    focusInput();
                }
            },
            focusTrap: true,
        },
        calendarProps: {
            ref: calendarRef,
            autoFocus: true,
            size: props.size === 's' ? 'm' : props.size,
            disabled: props.disabled,
            readOnly: props.readOnly,
            onUpdate: (d) => {
                state.setDateValue(d);
                if (!state.hasTime) {
                    focusInput();
                }
            },
            value: state.dateFieldState.displayValue,
            minValue: props.minValue,
            maxValue: props.maxValue,
            isDateUnavailable: props.isDateUnavailable,
            timeZone: state.timeZone,
        },
        timeInputProps: {
            value: state.timeValue,
            placeholderValue: state.dateFieldState.displayValue,
            onUpdate: state.setTimeValue,
            format: state.timeFormat,
            readOnly: state.readOnly,
            disabled: state.disabled,
            timeZone: state.timeZone,
            hasClear: props.hasClear,
            size: props.size,
        },
    };
}
exports.useDatePickerProps = useDatePickerProps;
