"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCalendarProps = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const uikit_1 = require("@gravity-ui/uikit");
const i18n_1 = require("../i18n");
const buttonDisabledClassName = 'yc-button_disabled g-button_disabled';
// eslint-disable-next-line complexity
function useCalendarProps(props, state) {
    const title = state.mode === 'years' || state.mode === 'quarters'
        ? `${state.startDate.year()} â€” ${state.endDate.year()}`
        : state.focusedDate.format(state.mode === 'days' ? 'MMMM YYYY' : 'YYYY');
    const { focusWithinProps } = (0, uikit_1.useFocusWithin)({
        onFocusWithin: props.onFocus,
        onBlurWithin: props.onBlur,
    });
    const calendarProps = Object.assign({ role: 'group', id: props.id, 'aria-label': [props['aria-label'], title].filter(Boolean).join(', '), 'aria-labelledby': props['aria-labelledby'] || undefined, 'aria-describedby': props['aria-describedby'] || undefined, 'aria-details': props['aria-details'] || undefined, 'aria-disabled': state.disabled || undefined }, focusWithinProps);
    const modeIndex = state.availableModes.indexOf(state.mode);
    const isModeLast = modeIndex + 1 === state.availableModes.length;
    const isNextModeLast = modeIndex + 2 === state.availableModes.length;
    const modeDisabled = state.disabled || isModeLast;
    const modeButtonProps = {
        disabled: state.disabled,
        // FIXME: do not use button class name
        className: modeDisabled ? buttonDisabledClassName : undefined,
        onClick: modeDisabled
            ? undefined
            : () => {
                state.zoomOut();
                if (isNextModeLast) {
                    state.setFocused(true);
                }
            },
        extraProps: {
            'aria-disabled': modeDisabled ? 'true' : undefined,
        },
        children: title,
    };
    const previousFocused = react_1.default.useRef(false);
    const previousDisabled = state.disabled || state.isPreviousPageInvalid();
    react_1.default.useLayoutEffect(() => {
        if (previousDisabled && previousFocused.current) {
            previousFocused.current = false;
            state.setFocused(true);
        }
    });
    const previousButtonProps = {
        disabled: state.disabled,
        // FIXME: do not use button class name
        className: previousDisabled ? buttonDisabledClassName : undefined,
        onClick: previousDisabled
            ? undefined
            : () => {
                state.focusPreviousPage();
            },
        onFocus: previousDisabled
            ? undefined
            : () => {
                previousFocused.current = true;
            },
        onBlur: previousDisabled
            ? undefined
            : () => {
                previousFocused.current = false;
            },
        extraProps: {
            'aria-label': (0, i18n_1.i18n)('Previous'),
            'aria-disabled': previousDisabled ? 'true' : undefined,
        },
    };
    const nextFocused = react_1.default.useRef(false);
    const nextDisabled = state.disabled || state.isNextPageInvalid();
    react_1.default.useLayoutEffect(() => {
        if (nextDisabled && nextFocused.current) {
            nextFocused.current = false;
            state.setFocused(true);
        }
    });
    const nextButtonProps = {
        disabled: state.disabled,
        // FIXME: do not use button class name
        className: nextDisabled ? buttonDisabledClassName : undefined,
        onClick: nextDisabled
            ? undefined
            : () => {
                state.focusNextPage();
            },
        onFocus: nextDisabled
            ? undefined
            : () => {
                nextFocused.current = true;
            },
        onBlur: nextDisabled
            ? undefined
            : () => {
                nextFocused.current = false;
            },
        extraProps: {
            'aria-label': (0, i18n_1.i18n)('Next'),
            'aria-disabled': previousDisabled ? 'true' : undefined,
        },
    };
    return {
        calendarProps,
        modeButtonProps,
        nextButtonProps,
        previousButtonProps,
    };
}
exports.useCalendarProps = useCalendarProps;
