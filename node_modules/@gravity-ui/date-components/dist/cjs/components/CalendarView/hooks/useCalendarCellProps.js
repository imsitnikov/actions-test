"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCalendarCellProps = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
function useCalendarCellProps(date, state) {
    const ref = react_1.default.useRef(null);
    const isFocused = state.isCellFocused(date);
    react_1.default.useEffect(() => {
        var _a;
        if (isFocused) {
            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
        }
    }, [isFocused]);
    const tabIndex = state.focusedDate.isSame(date, state.mode) ? 0 : -1;
    const isDisabled = state.isCellDisabled(date);
    const isSelected = state.isSelected(date);
    const highlightedRange = 'highlightedRange' in state && state.highlightedRange;
    const isRangeSelection = Boolean(highlightedRange && isSelected);
    const isSelectionStart = isSelected && highlightedRange && date.isSame(highlightedRange.start, state.mode);
    const isSelectionEnd = isSelected && highlightedRange && date.isSame(highlightedRange.end, state.mode);
    const isOutsideCurrentRange = state.mode === 'days' ? !state.focusedDate.isSame(date, 'month') : false;
    const isUnavailable = state.isCellUnavailable(date);
    const isSelectable = !isDisabled && !isUnavailable;
    const isCurrent = state.isCurrent(date);
    const isWeekend = state.isWeekend(date);
    const label = getDateLabel(date, state.mode);
    const cellProps = {
        role: 'gridcell',
        'aria-selected': isSelected ? 'true' : undefined,
        'aria-disabled': isDisabled ? 'true' : undefined,
    };
    const buttonProps = {
        ref,
        role: 'button',
        tabIndex: isDisabled ? undefined : tabIndex,
        'aria-disabled': isSelectable ? undefined : 'true',
        'aria-label': label,
        onClick: isSelectable
            ? () => {
                state.setFocusedDate(date);
                state.selectDate(date);
            }
            : undefined,
        onPointerEnter() {
            if ('highlightDate' in state && isSelectable) {
                if (isOutsideCurrentRange) {
                    const newDate = date.isBefore(state.focusedDate)
                        ? state.focusedDate.startOf('month')
                        : state.focusedDate.endOf('month').startOf('date');
                    state.highlightDate(newDate);
                }
                else {
                    state.highlightDate(date);
                }
            }
        },
    };
    let formattedDate = date.format('D');
    if (state.mode === 'months') {
        formattedDate = date.format('MMM');
    }
    else if (state.mode === 'quarters') {
        formattedDate = date.format('[Q]Q');
    }
    else if (state.mode === 'years') {
        formattedDate = date.format('YYYY');
    }
    return {
        cellProps,
        buttonProps,
        formattedDate,
        isDisabled,
        isSelected,
        isRangeSelection,
        isSelectionStart,
        isSelectionEnd,
        isOutsideCurrentRange,
        isUnavailable,
        isCurrent,
        isWeekend,
    };
}
exports.useCalendarCellProps = useCalendarCellProps;
function getDateLabel(date, mode) {
    let label = '';
    if (mode === 'days') {
        label = `${date.format('dddd')}, ${date.format('LL')}`;
    }
    else if (mode === 'months') {
        label = `${date.format('MMMM YYYY')}`;
    }
    else if (mode === 'quarters') {
        label = `${date.format('[Q]Q YYYY')}`;
    }
    else if (mode === 'years') {
        label = `${date.format('YYYY')}`;
    }
    return label;
}
