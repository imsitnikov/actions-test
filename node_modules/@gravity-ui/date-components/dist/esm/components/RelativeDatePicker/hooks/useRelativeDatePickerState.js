import React from 'react';
import { useControlledState } from '@gravity-ui/uikit';
import { useDatePickerState } from '../../DatePicker';
import { useRelativeDateFieldState } from '../../RelativeDateField';
export function useRelativeDatePickerState(props) {
    var _a;
    const [value, setValue] = useControlledState(props.value, (_a = props.defaultValue) !== null && _a !== void 0 ? _a : null, props.onUpdate);
    const [mode, setMode] = React.useState((value === null || value === void 0 ? void 0 : value.type) === 'relative' ? 'relative' : 'absolute');
    const [prevValue, setPrevValue] = React.useState(value);
    if (value !== prevValue) {
        setPrevValue(value);
        if (value && value.type !== mode) {
            setMode(value.type);
        }
    }
    const [valueDate, setValueDate] = React.useState((value === null || value === void 0 ? void 0 : value.type) === 'absolute' ? value.value : null);
    if ((value === null || value === void 0 ? void 0 : value.type) === 'absolute' && value.value !== valueDate) {
        setValueDate(value.value);
    }
    const datePickerState = useDatePickerState({
        value: valueDate,
        onUpdate: (date) => {
            setValueDate(date);
            if ((value === null || value === void 0 ? void 0 : value.type) === 'absolute' && (date === null || date === void 0 ? void 0 : date.isSame(value.value))) {
                return;
            }
            setValue(date ? { type: 'absolute', value: date } : null);
        },
        format: props.format,
        placeholderValue: props.placeholderValue,
        timeZone: props.timeZone,
        disabled: props.disabled,
        readOnly: props.readOnly,
        minValue: props.minValue,
        maxValue: props.maxValue,
    });
    const [valueRelative, setValueRelative] = React.useState((value === null || value === void 0 ? void 0 : value.type) === 'relative' ? value.value : null);
    if ((value === null || value === void 0 ? void 0 : value.type) === 'relative' && value.value !== valueRelative) {
        setValueRelative(value.value);
    }
    const relativeDateState = useRelativeDateFieldState({
        value: valueRelative,
        onUpdate: (v) => {
            setValueRelative(v);
            if ((value === null || value === void 0 ? void 0 : value.type) === 'relative' && v === value.value) {
                return;
            }
            setValue(v ? { type: 'relative', value: v } : null);
        },
        disabled: props.disabled,
        readOnly: props.readOnly,
        timeZone: datePickerState.timeZone,
        roundUp: props.roundUp,
    });
    if (!value) {
        if (mode === 'absolute' && valueDate) {
            setValueDate(null);
        }
        else if (mode === 'relative' && valueRelative) {
            setValueRelative(null);
        }
    }
    const selectedDate = mode === 'relative'
        ? relativeDateState.parsedDate
        : datePickerState.dateFieldState.displayValue;
    const [isActive, setActive] = React.useState(false);
    return {
        value,
        setValue(v) {
            if (props.readOnly || props.disabled) {
                return;
            }
            setValue(v);
        },
        disabled: props.disabled,
        readOnly: props.readOnly,
        mode,
        setMode(newMode) {
            if (props.readOnly || props.disabled || newMode === mode) {
                return;
            }
            setMode(newMode);
            if (newMode === 'relative') {
                if ((!value && valueRelative) || value) {
                    setValue(valueRelative ? { type: 'relative', value: valueRelative } : null);
                }
            }
            else if ((!value && valueDate) || value) {
                setValue(valueDate ? { type: 'absolute', value: valueDate } : null);
            }
        },
        datePickerState,
        relativeDateState,
        selectedDate,
        isActive,
        setActive,
    };
}
