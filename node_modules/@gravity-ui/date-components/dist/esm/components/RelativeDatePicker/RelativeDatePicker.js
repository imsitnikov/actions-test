import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Calendar as CalendarIcon, Function as FunctionIcon } from '@gravity-ui/icons';
import { Button, Icon, Popup, TextInput, useMobile } from '@gravity-ui/uikit';
import { block } from '../../utils/cn';
import { Calendar } from '../Calendar';
import { DateField } from '../DateField';
import { MobileCalendar, MobileCalendarIcon } from '../DatePicker/MobileCalendar';
import { useRelativeDatePickerProps } from './hooks/useRelativeDatePickerProps';
import { useRelativeDatePickerState } from './hooks/useRelativeDatePickerState';
import './RelativeDatePicker.css';
const b = block('relative-date-picker');
export function RelativeDatePicker(props) {
    const state = useRelativeDatePickerState(props);
    const { groupProps, fieldProps, modeSwitcherProps, calendarButtonProps, popupProps, calendarProps, timeInputProps, } = useRelativeDatePickerProps(state, props);
    const anchorRef = React.useRef(null);
    const isMobile = useMobile();
    return (_jsxs("div", Object.assign({ ref: anchorRef, className: b(null, props.className) }, groupProps, { children: [isMobile && state.mode === 'absolute' && (_jsx(MobileCalendar, { state: state.datePickerState, props: {
                    id: props.id,
                    disabled: props.disabled,
                    readOnly: props.readOnly,
                    placeholderValue: props.placeholderValue,
                    timeZone: props.timeZone,
                } })), _jsx(TextInput, Object.assign({}, fieldProps, { controlProps: Object.assign(Object.assign({}, fieldProps.controlProps), { disabled: isMobile && state.mode === 'absolute', className: b('input', { mobile: isMobile && state.mode === 'absolute' }) }), hasClear: props.hasClear && !(isMobile && state.mode === 'absolute'), startContent: _jsx(Button, Object.assign({}, modeSwitcherProps, { children: _jsx(Icon, { data: FunctionIcon }) })), endContent: _jsxs(React.Fragment, { children: [!isMobile && (_jsx(Button, Object.assign({}, calendarButtonProps, { children: _jsx(Icon, { data: CalendarIcon }) }))), isMobile && state.mode === 'absolute' && (_jsx(MobileCalendarIcon, { state: state.datePickerState, props: { size: props.size } }))] }) })), _jsx("input", { type: "text", hidden: true, name: props.name, value: getNativeValue(state.value), 
                // Ignore React warning
                onChange: () => { } }), !isMobile && (_jsx(Popup, Object.assign({}, popupProps, { anchorRef: anchorRef, children: _jsxs("div", { className: b('popup-content'), children: [typeof props.children === 'function' ? (props.children(calendarProps)) : (_jsx(Calendar, Object.assign({}, calendarProps))), state.datePickerState.hasTime && (_jsx("div", { className: b('time-field-wrapper'), children: _jsx(DateField, Object.assign({}, timeInputProps)) }))] }) })))] })));
}
function getNativeValue(value) {
    if (!value) {
        return '';
    }
    if (value.type === 'relative') {
        return value.value;
    }
    return value.value.toISOString();
}
