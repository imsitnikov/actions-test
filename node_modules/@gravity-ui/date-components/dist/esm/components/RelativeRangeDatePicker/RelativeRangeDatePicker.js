import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { dateTimeParse } from '@gravity-ui/date-utils';
import { Calendar as CalendarIcon } from '@gravity-ui/icons';
import { Button, Icon, Popover, TextInput, useFocusWithin, useMobile } from '@gravity-ui/uikit';
import { block } from '../../utils/cn';
import { getButtonSizeForInput } from '../utils/getButtonSizeForInput';
import { PickerDialog } from './components/PickerDialog/PickerDialog';
import { useRelativeRangeDatePickerState } from './hooks/useRelativeRangeDatePickerState';
import { i18n } from './i18n';
import { getDefaultTitle } from './utils';
import './RelativeRangeDatePicker.css';
const b = block('relative-range-date-picker');
export function RelativeRangeDatePicker(props) {
    var _a, _b;
    const state = useRelativeRangeDatePickerState(props);
    const isMobile = useMobile();
    const anchorRef = React.useRef(null);
    const inputRef = React.useRef(null);
    const [isActive, setIsActive] = React.useState(false);
    const [open, setOpen] = React.useState(false);
    const { focusWithinProps } = useFocusWithin({
        isDisabled: props.disabled || isMobile,
        onFocusWithinChange: (isFocusedWithin) => {
            if (!isFocusedWithin) {
                setIsActive(false);
            }
        },
    });
    const { alwaysShowAsAbsolute, presetTabs, getRangeTitle } = props;
    const format = (_a = props.format) !== null && _a !== void 0 ? _a : 'L';
    const text = React.useMemo(() => typeof getRangeTitle === 'function'
        ? getRangeTitle(state.value, state.timeZone)
        : getDefaultTitle({
            value: state.value,
            timeZone: state.timeZone,
            alwaysShowAsAbsolute: alwaysShowAsAbsolute,
            format,
            presets: presetTabs === null || presetTabs === void 0 ? void 0 : presetTabs.flatMap(({ presets }) => presets),
        }), [alwaysShowAsAbsolute, format, getRangeTitle, presetTabs, state.timeZone, state.value]);
    const validationState = props.validationState || (state.isInvalid ? 'invalid' : undefined);
    const errorMessage = (_b = props.errorMessage) !== null && _b !== void 0 ? _b : state.errors.join('\n');
    return (_jsxs("div", Object.assign({ ref: anchorRef }, focusWithinProps, { className: b(null, props.className), style: props.style, children: [_jsx(Popover, { className: b('value-label'), tooltipContentClassName: b('value-label-tooltip'), disabled: isMobile || open || !state.value, delayOpening: 500, placement: ['right', 'right-start', 'right-end', 'auto'], hasArrow: false, content: _jsx(ValueLabel, { value: state.value, format: format, timeZone: state.timeZone }), children: _jsx(TextInput, { controlRef: inputRef, value: text, placeholder: props.placeholder, onUpdate: (v) => {
                        if (!props.readOnly && !v) {
                            state.setValue(null, 'default');
                        }
                    }, controlProps: {
                        'aria-haspopup': 'dialog',
                        'aria-expanded': open,
                        disabled: isMobile,
                        className: b('input', { mobile: isMobile }),
                    }, onKeyDown: (e) => {
                        if (props.disabled) {
                            return;
                        }
                        if (e.altKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp')) {
                            e.preventDefault();
                            setOpen(true);
                        }
                    }, onFocus: () => {
                        if (!isActive) {
                            setIsActive(true);
                            setOpen(true);
                        }
                    }, validationState: validationState, errorMessage: errorMessage, errorPlacement: props.errorPlacement, pin: props.pin, size: props.size, label: props.label, hasClear: props.hasClear, disabled: props.disabled, endContent: _jsx(Button, { view: "flat-secondary", size: getButtonSizeForInput(props.size), disabled: props.disabled, extraProps: {
                            'aria-haspopup': 'dialog',
                            'aria-expanded': open,
                        }, onClick: () => {
                            setIsActive(true);
                            setOpen(!open);
                        }, children: _jsx(Icon, { data: CalendarIcon }) }) }) }), isMobile ? (_jsx("button", { className: b('mobile-trigger', {
                    'has-clear': Boolean(props.hasClear && state.value),
                    'has-errors': state.isInvalid && props.errorPlacement === 'inside',
                    size: props.size,
                }), onClick: () => {
                    setIsActive(true);
                    setOpen(true);
                } })) : null, _jsx(PickerDialog, { state: state, props: props, open: open, onClose: () => {
                    setOpen(false);
                }, anchorRef: anchorRef, isMobile: isMobile, className: props.className })] })));
}
function ValueLabel({ value, format, timeZone }) {
    var _a, _b, _c, _d;
    return (_jsxs("div", { className: b('value-label-content'), children: [_jsx("span", { className: b('value-label-item'), children: (_b = dateTimeParse((_a = value === null || value === void 0 ? void 0 : value.start) === null || _a === void 0 ? void 0 : _a.value, { timeZone })) === null || _b === void 0 ? void 0 : _b.format(format) }), _jsx("span", { className: b('value-label-to'), children: i18n('to') }), _jsx("span", { className: b('value-label-item'), children: (_d = dateTimeParse((_c = value === null || value === void 0 ? void 0 : value.end) === null || _c === void 0 ? void 0 : _c.value, { timeZone, roundUp: true })) === null || _d === void 0 ? void 0 : _d.format(format) }), timeZone && _jsx("span", { className: b('value-label-tz'), children: timeZone })] }));
}
