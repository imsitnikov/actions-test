import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { getTimeZonesList } from '@gravity-ui/date-utils';
import { ChevronRight } from '@gravity-ui/icons';
import { Button, Icon, Select, Text } from '@gravity-ui/uikit';
import { block } from '../../../../utils/cn';
import { getTimeZoneOffset, normalizeTimeZone } from '../../utils';
import { i18n } from './i18n';
import './Zones.css';
const groups = {};
const zones = getTimeZonesList().reduce((opts, value) => {
    const [groupName] = value.split('/');
    if (groupName) {
        let group = groups[groupName];
        if (!group) {
            group = { label: groupName, options: [] };
            groups[groupName] = group;
            opts.push(group);
        }
        group.options.push({ value });
    }
    return opts;
}, []);
zones.unshift({
    value: 'UTC',
});
zones.unshift({
    value: 'system',
    get content() {
        return i18n('system');
    },
});
zones.unshift({
    value: 'default',
    get content() {
        return i18n('default');
    },
});
const b = block('relative-range-date-picker-zones');
export function Zones(props) {
    const timeZone = normalizeTimeZone(props.value);
    const size = props.isMobile ? 'xl' : props.size;
    return (_jsx(Select, { value: [timeZone], options: zones, size: size, onUpdate: (v) => {
            const tz = v[0];
            if (tz) {
                props.onUpdate(tz);
            }
        }, width: "max", renderControl: (controlProps) => {
            const value = timeZone === 'system' || timeZone === 'default' ? i18n(timeZone) : timeZone;
            return (_jsxs(Button, { onClick: controlProps.onClick, ref: controlProps.ref, view: "flat-secondary", width: "max", pin: "clear-clear", size: size, extraProps: {
                    'aria-haspopup': 'listbox',
                    'aria-expanded': controlProps.open,
                    onKeyDown: controlProps.onKeyDown,
                }, className: b('control'), children: [`${value} (${getTimeZoneOffset(timeZone)})`, _jsx(Icon, { className: b('control-icon'), data: ChevronRight, size: props.isMobile ? 20 : 16 })] }));
        }, renderOption: ({ value, content }) => {
            const v = content !== null && content !== void 0 ? content : value;
            return (_jsxs("span", { className: b('item'), children: [_jsxs("span", { className: b('item-title'), title: value, children: [v, "\u00A0"] }), _jsx(Text, { color: "secondary", children: getTimeZoneOffset(value) })] }));
        }, filterable: true }));
}
