import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { CircleQuestion } from '@gravity-ui/icons';
import { Button, Icon, Popover, Sheet, Table, useMobile } from '@gravity-ui/uikit';
import { block } from '../../../../utils/cn';
import { getButtonSizeForInput } from '../../../utils/getButtonSizeForInput';
import { i18n } from './i18n';
import './PresetsDoc.css';
const b = block('relative-range-date-picker-presets-doc');
const columns = [
    {
        id: 'title',
        name: () => {
            return i18n('Range');
        },
    },
    {
        id: 'from',
        name: () => {
            return i18n('From');
        },
    },
    {
        id: 'to',
        name: () => {
            return i18n('To');
        },
    },
];
const data = [
    {
        get title() {
            return i18n('Last 5 minutes');
        },
        from: 'now — 5m',
        to: 'now',
    },
    {
        get title() {
            return i18n('From start of day');
        },
        from: 'now/d',
        to: 'now',
    },
    {
        get title() {
            return i18n('This week');
        },
        from: 'now/w',
        to: 'now/w',
    },
    {
        get title() {
            return i18n('From start of week');
        },
        from: 'now/w',
        to: 'now',
    },
    {
        get title() {
            return i18n('Previous month');
        },
        from: 'now — 1M/M',
        to: 'now — 1M/M',
    },
];
function PresetsExamples({ size }) {
    return _jsx(Table, { columns: columns, data: data, className: b('table', { size }) });
}
function DesktopDoc({ className, size }) {
    return (_jsx(Popover, { className: b(null, className), tooltipContentClassName: b('content'), hasArrow: false, content: _jsx(PresetsExamples, { size: size }), children: _jsx(Button, { className: b('button'), view: "flat-secondary", size: getButtonSizeForInput(size), children: _jsx(Icon, { data: CircleQuestion }) }) }));
}
function MobileDoc({ className, size }) {
    const [open, setOpen] = React.useState(false);
    return (_jsxs("div", { className: b(null, className), children: [_jsx(Button, { className: b('button'), view: "flat-secondary", size: "l", onClick: () => {
                    setOpen(true);
                }, children: _jsx(Icon, { data: CircleQuestion }) }), _jsx(Sheet, { visible: open, onClose: () => setOpen(false), children: _jsx(PresetsExamples, { size: size }) })] }));
}
export function PresetsDoc({ className, size }) {
    const isMobile = useMobile();
    if (isMobile) {
        return _jsx(MobileDoc, { className: className, size: size });
    }
    return _jsx(DesktopDoc, { className: className, size: size });
}
