import type { DateTime } from '@gravity-ui/date-utils';
import type { Value } from '../../RelativeDatePicker';
import type { RangeValue } from '../../types';
export interface RelativeRangeDatePickerState {
    value: RangeValue<Value | null> | null;
    timeZone: string;
    setValue: (value: RangeValue<Value | null> | null, timeZone: string) => void;
    isInvalid: boolean;
    errors: string[];
}
export interface RelativeRangeDatePickerStateOptions {
    value?: RangeValue<Value | null> | null;
    defaultValue?: RangeValue<Value | null>;
    onUpdate?: (value: RangeValue<Value | null> | null, timeZone: string) => void;
    timeZone?: string;
    defaultTimeZone?: string;
    onUpdateTimeZone?: (timeZone: string) => void;
    /** The minimum allowed date that a user may select. */
    minValue?: DateTime;
    /** The maximum allowed date that a user may select. */
    maxValue?: DateTime;
    /** Callback that is called for each date of the calendar. If it returns true, then the date is unavailable. */
    isDateUnavailable?: (date: DateTime) => boolean;
    allowNullableValues?: boolean;
}
export declare function useRelativeRangeDatePickerState(props: RelativeRangeDatePickerStateOptions): RelativeRangeDatePickerState;
