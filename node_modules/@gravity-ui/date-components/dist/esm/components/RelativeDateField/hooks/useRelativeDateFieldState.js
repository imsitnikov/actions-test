import React from 'react';
import { dateTimeParse, isValid } from '@gravity-ui/date-utils';
import { useControlledState } from '@gravity-ui/uikit';
export function useRelativeDateFieldState(props) {
    var _a;
    const [value, setValue] = useControlledState(props.value, (_a = props.defaultValue) !== null && _a !== void 0 ? _a : null, props.onUpdate);
    const [text, setText] = React.useState(value !== null && value !== void 0 ? value : '');
    if (value && value !== text) {
        setText(value);
    }
    const handleTextChange = (t) => {
        if (props.disabled || props.readOnly) {
            return;
        }
        setText(t);
        if (isLikeRelativeDate(t)) {
            const date = dateTimeParse(t);
            if (date && isValid(date)) {
                setValue(t);
            }
            else {
                setValue(null);
            }
        }
        else {
            setValue(null);
        }
    };
    const parsedDate = React.useMemo(() => {
        var _a;
        if (!value) {
            return null;
        }
        return (_a = dateTimeParse(value, { timeZone: props.timeZone, roundUp: props.roundUp })) !== null && _a !== void 0 ? _a : null;
    }, [value, props.timeZone]);
    const [lastCorrectDate, setLastCorrectDate] = React.useState(parsedDate);
    if (parsedDate && parsedDate !== lastCorrectDate) {
        setLastCorrectDate(parsedDate);
    }
    const validationState = props.validationState || (text && !parsedDate) ? 'invalid' : undefined;
    return {
        value,
        setValue(v) {
            if (props.disabled || props.readOnly) {
                return;
            }
            setValue(v);
        },
        text,
        setText: handleTextChange,
        parsedDate,
        lastCorrectDate,
        validationState,
        disabled: props.disabled,
        readOnly: props.readOnly,
    };
}
function isLikeRelativeDate(text) {
    return /^now/i.test(text);
}
