import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Popup, TextInput, useFocusWithin, useMobile } from '@gravity-ui/uikit';
import { block } from '../../utils/cn';
import { Calendar } from '../Calendar';
import { DateField } from '../DateField';
import { useRelativeDateFieldProps } from './hooks/useRelativeDateFieldProps';
import { useRelativeDateFieldState } from './hooks/useRelativeDateFieldState';
import './RelativeDateField.css';
const b = block('relative-date-field');
export function RelativeDateField(props) {
    var _a;
    const state = useRelativeDateFieldState(props);
    const { inputProps, calendarProps, timeInputProps } = useRelativeDateFieldProps(state, props);
    const isMobile = useMobile();
    const anchorRef = React.useRef(null);
    const [isOpen, setOpen] = React.useState(false);
    const { focusWithinProps } = useFocusWithin({
        onBlurWithin: () => {
            setOpen(false);
        },
        isDisabled: isMobile,
    });
    return (_jsxs("div", Object.assign({ role: "group", className: b(null, props.className), style: props.style }, focusWithinProps, { children: [_jsx(TextInput, Object.assign({}, inputProps, { className: b('field'), ref: anchorRef, onFocus: (e) => {
                    var _a;
                    if (!isMobile) {
                        setOpen(true);
                    }
                    (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);
                }, onBlur: props.onBlur })), _jsx("input", { type: "text", hidden: true, name: props.name, value: (_a = state.value) !== null && _a !== void 0 ? _a : '', 
                // Ignore React warning
                onChange: () => { } }), !isMobile && (_jsx(Popup, { anchorRef: anchorRef, open: isOpen, children: _jsxs("div", { className: b('popup-content'), children: [_jsx(Calendar, Object.assign({}, calendarProps)), props.hasTime ? (_jsx("div", { className: b('time-field-wrapper'), children: _jsx(DateField, Object.assign({ className: b('time-field') }, timeInputProps)) })) : null] }) }))] })));
}
