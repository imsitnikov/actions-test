export function mergeProps(...args) {
    const result = Object.assign({}, args[0]);
    for (let i = 1; i < args.length; i++) {
        const props = args[i];
        if (!props) {
            continue;
        }
        for (const key of Object.keys(props)) {
            const left = result[key];
            const right = props[key];
            if (typeof left === 'function' &&
                typeof right === 'function' &&
                key.startsWith('on') &&
                key.charCodeAt(2) >= /* A */ 65 &&
                key.charCodeAt(2) <= /* Z */ 90) {
                result[key] = chain(left, right);
            }
            else if (key === 'className' &&
                typeof left === 'string' &&
                typeof right === 'string') {
                result[key] = left + ' ' + right;
            }
            else if (key === 'controlProps' &&
                typeof left === 'object' &&
                typeof right === 'object') {
                result[key] = mergeProps(left, right);
            }
            else {
                result[key] = right === undefined ? left : right;
            }
        }
    }
    return result;
}
function chain(...fns) {
    return (...args) => {
        for (const callback of fns) {
            if (typeof callback === 'function') {
                callback(...args);
            }
        }
    };
}
