import { __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Calendar as CalendarIcon } from '@gravity-ui/icons';
import { Button, Icon, Popup, TextInput, useMobile } from '@gravity-ui/uikit';
import { Calendar } from '../Calendar';
import { DateField } from '../DateField';
import { MobileCalendar, MobileCalendarIcon } from './MobileCalendar';
import { useDatePickerProps } from './hooks/useDatePickerProps';
import { useDatePickerState } from './hooks/useDatePickerState';
import { b } from './utils';
import './DatePicker.css';
export function DatePicker(_a) {
    var { className } = _a, props = __rest(_a, ["className"]);
    const anchorRef = React.useRef(null);
    const state = useDatePickerState(props);
    const { groupProps, fieldProps, calendarButtonProps, popupProps, calendarProps, timeInputProps } = useDatePickerProps(state, props);
    const isMobile = useMobile();
    return (_jsxs("div", Object.assign({ className: b(null, className) }, groupProps, { children: [isMobile ? (_jsx(MobileCalendar, { props: props, state: state })) : (_jsx("div", { ref: anchorRef, className: b('popup-anchor'), children: _jsx(Popup, Object.assign({ anchorRef: anchorRef }, popupProps, { children: _jsxs("div", { className: b('popup-content'), children: [typeof props.children === 'function' ? (props.children(calendarProps)) : (_jsx(Calendar, Object.assign({}, calendarProps))), state.hasTime && (_jsx("div", { className: b('time-field-wrapper'), children: _jsx(DateField, Object.assign({}, timeInputProps)) }))] }) })) })), _jsx(TextInput, Object.assign({}, fieldProps, { className: b('field', { mobile: isMobile }), hasClear: !isMobile && fieldProps.hasClear, endContent: isMobile ? (_jsx(MobileCalendarIcon, { props: props, state: state })) : (_jsx(Button, Object.assign({}, calendarButtonProps, { children: _jsx(Icon, { data: CalendarIcon }) }))) })), _jsx("input", { type: "text", hidden: true, name: props.name, value: state.value ? state.value.toISOString() : '', 
                // Ignore React warning
                onChange: () => { } })] })));
}
