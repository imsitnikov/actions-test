import type { DateTime } from '@gravity-ui/date-utils';
import type { DateFieldState } from '../../DateField';
import type { DateFieldBase } from '../../types';
export type Granularity = 'day' | 'hour' | 'minute' | 'second';
export interface DatePickerState {
    /** The currently selected date. */
    value: DateTime | null;
    /** Sets the selected date. */
    setValue: (value: DateTime | null) => void;
    /**
     * The date portion of the value. This may be set prior to `value` if the user has
     * selected a date but has not yet selected a time.
     */
    dateValue: DateTime | null;
    /** Sets the date portion of the value. */
    setDateValue: (value: DateTime) => void;
    /**
     * The time portion of the value. This may be set prior to `value` if the user has
     * selected a time but has not yet selected a date.
     */
    timeValue: DateTime | null;
    /** Sets the time portion of the value. */
    setTimeValue: (value: DateTime | null) => void;
    /** Whether the field is read only. */
    readOnly?: boolean;
    /** Whether the field is disabled. */
    disabled?: boolean;
    /** Format of the date when rendered in the input. */
    format: string;
    /** Whether the date picker supports selecting a date. */
    hasDate: boolean;
    /** Whether the date picker supports selecting a time. */
    hasTime: boolean;
    /** Format of the time when rendered in the input. */
    timeFormat?: string;
    timeZone: string;
    /** Whether the calendar popover is currently open. */
    isOpen: boolean;
    /** Sets whether the calendar popover is open. */
    setOpen: (isOpen: boolean) => void;
    dateFieldState: DateFieldState;
}
export interface DatePickerStateOptions extends DateFieldBase {
}
export declare function useDatePickerState(props: DatePickerStateOptions): DatePickerState;
