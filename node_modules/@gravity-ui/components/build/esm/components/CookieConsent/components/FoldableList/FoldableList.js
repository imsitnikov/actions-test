import React from 'react';
import { ChevronLeft, ChevronRight } from '@gravity-ui/icons';
import { ArrowToggle, Checkbox, Disclosure, Icon, Label, Link, Text, useDirection, } from '@gravity-ui/uikit';
import { block } from '../../../utils/cn';
import './FoldableList.css';
const b = block('foldable-list');
export const FoldableList = ({ items, className, isMobile, onChooseItem }) => {
    const direction = useDirection();
    const [checkedItems, setChecked] = React.useState(() => items.reduce((acc, item, index) => {
        if (item.checked) {
            acc.push(index);
        }
        return acc;
    }, []));
    const onCheckItem = (index) => {
        return () => {
            let newState;
            if (checkedItems.includes(index)) {
                newState = checkedItems.filter((intemIndex) => intemIndex !== index);
            }
            else {
                newState = [...checkedItems, index];
            }
            onChooseItem === null || onChooseItem === void 0 ? void 0 : onChooseItem(newState);
            setChecked(newState);
        };
    };
    return (React.createElement("div", { className: b(null, className) }, items.map(({ title, titleLabel, text, link, checked, disabled, defaultExpand }, index) => {
        const isChecked = checkedItems.includes(index);
        return (React.createElement(Disclosure, { key: index, size: "l", defaultExpanded: defaultExpand, className: b('item', { mobile: isMobile }) },
            React.createElement(Disclosure.Summary, null, ({ onClick, ariaControls, expanded }) => (React.createElement("div", { className: b('item-title-wrapper') },
                React.createElement(Checkbox, { className: b('item-checkbox', {
                        multiline: Boolean(titleLabel),
                    }), checked: checked || isChecked, size: "l", onChange: onCheckItem(index), disabled: disabled }),
                React.createElement("button", { type: "button", className: b('item-button'), onClick: onClick, "aria-controls": ariaControls, "aria-expanded": expanded },
                    React.createElement("div", { className: b('title') },
                        React.createElement("div", { className: b('title-text') },
                            React.createElement(Text, { className: b('title-text'), variant: "subheader-2" }, title),
                            titleLabel ? (React.createElement(Label, { className: b('title-label') }, titleLabel)) : null),
                        React.createElement(ArrowToggle, { className: b('title-arrow', {
                                multiline: Boolean(titleLabel),
                            }), direction: expanded ? 'top' : 'bottom', size: 20 })))))),
            React.createElement("div", { className: b('content') },
                React.createElement(Text, { variant: "body-2", className: b('content-text') }, text),
                link ? (React.createElement(Link, Object.assign({}, link, { className: b('content-link'), href: link.href, target: "_blank" }),
                    link.title,
                    React.createElement(Icon, { className: b('content-icon'), data: direction === 'rtl' ? ChevronLeft : ChevronRight, size: 16 }))) : null)));
    })));
};
