var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ArrowLeft, ArrowRight, Xmark } from '@gravity-ui/icons';
import { Button, Icon, Link, Modal, Text, useDirection, useMobile } from '@gravity-ui/uikit';
import { block } from '../../../utils/cn';
import { ConsentType } from '../../ConsentManager';
import { i18n } from '../../i18n';
import { FoldableList } from '../FoldableList/FoldableList';
import { ConsentPopupStep, } from './types';
import './ConsentPopup.css';
const b = block('consent-popup');
const Header = ({ currentStep, initialStep, onClose, onChangeStep, isMobile }) => {
    const direction = useDirection();
    const buttonsEnabled = currentStep === ConsentPopupStep.Manage;
    const isBackButtonVisible = buttonsEnabled && initialStep === ConsentPopupStep.Main;
    return (React.createElement("div", { className: b('header') },
        React.createElement("div", null,
            isBackButtonVisible ? (React.createElement(Button, { className: b('arrow-button'), view: "flat", size: "s", onClick: onChangeStep(ConsentPopupStep.Main) },
                React.createElement(Icon, { data: direction === 'rtl' ? ArrowRight : ArrowLeft, size: 16 }))) : null,
            React.createElement(Text, { className: b('title'), variant: buttonsEnabled && !isMobile ? 'body-3' : 'header-1' }, i18n(buttonsEnabled ? 'label_title_manage' : 'label_title_main'))),
        buttonsEnabled && !isBackButtonVisible ? (React.createElement(Button, { className: b('close-button'), view: "flat", size: "s", onClick: onClose },
            React.createElement(Icon, { data: Xmark, size: 16 }))) : null));
};
const Footer = ({ onAction, currentStep, currentConsents, buttonAcceptText = i18n('button_accept_all'), buttonNecessaryText = i18n('button_necessary'), buttonConfirmText = i18n('button_confirm'), }) => {
    const isManageStep = currentStep === ConsentPopupStep.Manage;
    const onButtonClick = (onlyNecessary) => {
        return () => {
            onAction(onlyNecessary ? 'OnlyNecessary' : 'All');
        };
    };
    const confirmSelectedConsent = () => {
        onAction(currentConsents);
    };
    return (React.createElement("div", { className: b('buttons') },
        React.createElement(Button, { key: "reject", className: b('button'), onClick: onButtonClick(true), size: "l", view: "normal" }, buttonNecessaryText),
        React.createElement(Button, { key: "confirm", className: b('button'), onClick: isManageStep ? confirmSelectedConsent : onButtonClick(), size: "l", view: "action" }, isManageStep ? buttonConfirmText : buttonAcceptText)));
};
export const ConsentPopup = (_a) => {
    var { policyLink, onAction, className, policyLinkText = i18n('label_policy_extended'), text, manageLabelText = i18n('manage_label_text_extended'), step = ConsentPopupStep.Main, cookieList, onClose, consentManager } = _a, buttonsParams = __rest(_a, ["policyLink", "onAction", "className", "policyLinkText", "text", "manageLabelText", "step", "cookieList", "onClose", "consentManager"]);
    const mobile = useMobile();
    const [currentConsents, setCurrentConsents] = React.useState(consentManager.getConsents());
    const [currentStep, setCurrentStep] = React.useState(step);
    const onChangeStep = (newStep) => {
        return () => setCurrentStep(newStep);
    };
    const isManageStep = currentStep === ConsentPopupStep.Manage;
    const preparedCookieList = React.useMemo(() => {
        return cookieList === null || cookieList === void 0 ? void 0 : cookieList.map((item) => {
            var _a, _b;
            const isNecessaryItem = item.type === ConsentType.Necessary;
            return {
                checked: Boolean(currentConsents[item.type]),
                disabled: isNecessaryItem,
                defaultExpand: isNecessaryItem,
                title: item.title || i18n(`cookie_${item.type}_title`),
                text: item.text || i18n(`cookie_${item.type}_text`),
                link: item.link
                    ? {
                        href: (_a = item.link) === null || _a === void 0 ? void 0 : _a.href,
                        title: ((_b = item.link) === null || _b === void 0 ? void 0 : _b.title) || i18n(`cookie_link_text`),
                    }
                    : undefined,
                titleLabel: item.titleLabel,
            };
        });
    }, [cookieList, currentConsents]);
    const onChoose = (checkedItems) => {
        if (!cookieList)
            return;
        setCurrentConsents(cookieList.reduce((acc, item, index) => {
            acc[item.type] = checkedItems.includes(index);
            return acc;
        }, {}));
    };
    return (React.createElement(Modal, { open: true, disableOutsideClick: true, disableEscapeKeyDown: true, contentClassName: b('modal-content', { step: currentStep, mobile }), onClose: onClose },
        React.createElement("div", { className: b(null, className) },
            React.createElement(Header, { currentStep: currentStep, initialStep: step, onClose: onClose, onChangeStep: onChangeStep, isMobile: mobile }),
            React.createElement("div", { className: b('body', { step }) }, isManageStep ? (React.createElement(React.Fragment, null,
                React.createElement(Text, { className: b('text'), variant: mobile ? 'header-1' : 'subheader-2' }, i18n('manage_subtitle_extended')),
                React.createElement("div", { className: b('text') },
                    manageLabelText,
                    policyLink && policyLinkText && (React.createElement(React.Fragment, null,
                        ' ',
                        React.createElement(Link, { href: policyLink, target: "_blank" }, policyLinkText))),
                    "."),
                preparedCookieList ? (React.createElement(FoldableList, { isMobile: mobile, className: b('cookie-list'), items: preparedCookieList, onChooseItem: onChoose })) : null)) : (React.createElement(React.Fragment, null,
                React.createElement("div", { className: b('text') },
                    React.createElement("span", { dangerouslySetInnerHTML: {
                            __html: text ? text : i18n('label_text_extended'),
                        } })),
                React.createElement("div", { className: b('text') },
                    React.createElement(Button, { onClick: onChangeStep(ConsentPopupStep.Manage), view: "outlined-action" }, i18n('label_manage_cookie_link_text')))))),
            React.createElement(Footer, Object.assign({ currentStep: currentStep, onAction: onAction, currentConsents: currentConsents }, buttonsParams)))));
};
