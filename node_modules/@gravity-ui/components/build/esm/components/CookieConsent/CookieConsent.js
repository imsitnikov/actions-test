var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { block } from '../utils/cn';
import { ConsentNotification } from './components/ConsentNotification/ConsentNotification';
import { ConsentPopup } from './components/ConsentPopup/ConsentPopup';
import { ConsentPopupStep } from './components/ConsentPopup/types';
import { SimpleConsent } from './components/SimpleConsent/SimpleConsent';
const b = block('analytics');
export const CookieConsent = (_a) => {
    var { consentManager, onConsentPopupClose, manageCookies } = _a, popupProps = __rest(_a, ["consentManager", "onConsentPopupClose", "manageCookies"]);
    const [isOpened, setIsOpened] = React.useState(false);
    React.useEffect(() => {
        // Show banner after some timeout so that the user has time to see the service content
        const timeoutId = setTimeout(() => {
            if (consentManager.isConsentNotDefined()) {
                setIsOpened(true);
            }
        }, 1000);
        return () => clearTimeout(timeoutId);
    }, [consentManager]);
    const onConsentPopupAction = (values) => {
        consentManager.setConsents(values);
        setIsOpened(false);
        onConsentPopupClose === null || onConsentPopupClose === void 0 ? void 0 : onConsentPopupClose();
    };
    const onClose = () => {
        setIsOpened(false);
        onConsentPopupClose === null || onConsentPopupClose === void 0 ? void 0 : onConsentPopupClose();
    };
    const view = manageCookies ? 'manage' : consentManager.mode;
    if (isOpened || manageCookies) {
        switch (view) {
            case 'manage':
                return (React.createElement(ConsentPopup, Object.assign({}, popupProps, { className: b(), step: manageCookies ? ConsentPopupStep.Manage : ConsentPopupStep.Main, onAction: onConsentPopupAction, onClose: onClose, consentManager: consentManager })));
            case 'notification':
                return (React.createElement(ConsentNotification, Object.assign({}, popupProps, { className: b(), onAction: onConsentPopupAction, consentManager: consentManager })));
            case 'base':
                return (React.createElement(SimpleConsent, Object.assign({}, popupProps, { className: b(), onAction: onConsentPopupAction, consentManager: consentManager })));
        }
    }
    return null;
};
