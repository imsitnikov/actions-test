import React from 'react';
import { SelectProps } from '@gravity-ui/uikit';
import './AdaptiveTabs.css';
type RenderControlProps = Parameters<NonNullable<SelectProps['renderControl']>>[0];
type OpenChangeProps = Parameters<NonNullable<SelectProps['onOpenChange']>>[0];
export interface TabProps {
    id: string;
    title?: string | React.ReactNode;
    hint?: string;
    active?: boolean;
    disabled?: boolean;
    onClick?: (id: string, event: React.MouseEvent) => void;
}
export type TabItem<T> = T & {
    id: string;
    title?: React.ReactNode;
    hint?: string;
    disabled?: boolean;
};
export type TabsSize = 'm' | 'l' | 'xl';
export interface AdaptiveTabsProps<T> {
    /** Array of tabs */
    items: TabItem<T>[];
    /** Active tab id */
    activeTab?: string;
    /** Breakpoints config which control the thersholds of tab size */
    breakpointsConfig: Record<string, number>;
    /** Select tab handler */
    onSelectTab: (tabId: string, event?: React.MouseEvent) => void;
    /** Allows to wrap TabItem into another component or render custom tab */
    wrapTo?(item: TabItem<T> | undefined, node: React.ReactNode, index: number | undefined): React.ReactNode;
    /** Class name for the tabs container */
    className?: string;
    /** Tabs size */
    size?: TabsSize;
    /** Allows you not to specify activeTab */
    allowNotSelected?: boolean;
}
interface AdaptiveTabsState {
    dimensionsWereCollected: boolean;
    firstHiddenTabIndex: number;
    firstHiddenTabIndexBeforeRecollection: number | null;
    tabChosenFromSelectId: string | null;
    currentContainerWidthName: string | null | undefined;
    isSelectOpened: boolean;
}
export declare class AdaptiveTabs<T> extends React.Component<AdaptiveTabsProps<T>, AdaptiveTabsState> {
    static defaultProps: {
        breakpointsConfig: {
            '150': number;
            '400': number;
            '500': number;
            '700': number;
            '800': number;
            '900': number;
            '1000': number;
            '1100': number;
            '1200': number;
            '1300': number;
            '1400': number;
        };
    };
    private readonly breakpoints;
    private readonly tabMaxWidthInPercentsForScreenSize;
    private readonly throttledHandleResize;
    private resizeObserver?;
    private tabItemPaddingRight;
    private switcherWidth;
    private tabsRealWidth;
    private overflownTabsRealWidth;
    private overflownTabsCurrentWidth;
    private tabsWidth;
    private dimensionsWereInitiallyCollected;
    private selectSwitcherNode;
    private tabsRootNode;
    private tabsListNode;
    get activeTab(): string | undefined;
    constructor(props: AdaptiveTabsProps<T>);
    componentDidMount(): void;
    subscribeForResize: () => void;
    componentDidUpdate(prevProps: AdaptiveTabsProps<T>): void;
    componentWillUnmount(): void;
    initialCollectDimensions: () => void;
    collectDimensions: () => void;
    getCurrentContainerWidthName: () => string | undefined;
    recalculateTabs: () => false | undefined;
    setUpOverflownTabs(firstHiddenTabIndex: number, _activeTabIndex: number, tabsRootNodeWidth: number): void;
    recollectDimensions: () => void;
    selectTab(tabId: string, event?: React.MouseEvent): void;
    wasItemsListUpdated: (currentItems: TabItem<unknown>[], prevItems: TabItem<unknown>[]) => boolean;
    handleResize: () => void;
    onChooseTabFromSelect: (tabChosenFromSelectIds: string[]) => void;
    onTabClick: (tabId: string, event?: React.MouseEvent<Element, MouseEvent>) => void;
    calcSelectSwitcherInlineStartPosition: () => number;
    renderSwitcherForMoreSelect: (switcherProps: RenderControlProps) => React.JSX.Element;
    renderSwitcherForTabsAsSelect: (switcherProps: RenderControlProps) => React.JSX.Element;
    renderSwitcher: (switcherProps: RenderControlProps & {
        text: string;
        active?: boolean;
    }) => React.JSX.Element;
    renderTabs: () => React.JSX.Element[];
    renderTabItem: (item: TabItem<T>, tabIndex: number) => React.JSX.Element;
    renderSelect(): React.JSX.Element;
    handleTabsAsSelectUpdate: (ids: string[]) => void;
    handleOpenSelectChange: (isSelectOpened: OpenChangeProps) => void;
    renderTabsAsSelect(): React.JSX.Element;
    render(): React.JSX.Element;
}
export {};
