import React from 'react';
import { Xmark } from '@gravity-ui/icons';
import { Button, Icon, Sheet } from '@gravity-ui/uikit';
import { block } from '../utils/cn';
import './PromoSheet.css';
const cn = block('promo-sheet');
export function PromoSheet({ title, message, actionText, closeText, actionHref, imageSrc, className, contentClassName, imageContainerClassName, imageClassName, onActionClick, onClose, }) {
    const [visible, setVisible] = React.useState(true);
    const [loaded, setLoaded] = React.useState(!imageSrc);
    const [imageSizes, setImageSizes] = React.useState();
    const handleActionClick = React.useCallback((event) => {
        setVisible(false);
        onActionClick === null || onActionClick === void 0 ? void 0 : onActionClick(event);
    }, [onActionClick]);
    const handleCloseClick = React.useCallback(() => {
        setVisible(false);
    }, []);
    const closeButtonExtraProps = React.useMemo(() => ({
        'aria-label': closeText,
    }), [closeText]);
    React.useEffect(() => {
        if (!imageSrc) {
            setLoaded(true);
            return;
        }
        const image = new Image();
        image.onload = () => {
            setImageSizes({
                width: image.naturalWidth,
                height: image.naturalHeight,
            });
            setLoaded(true);
            image.onload = null;
            image.onerror = null;
        };
        image.onerror = () => {
            setImageSizes(undefined);
            setLoaded(true);
            image.onload = null;
            image.onerror = null;
        };
        image.src = imageSrc;
    }, [imageSrc]);
    return (React.createElement(Sheet, { className: cn(null, className), contentClassName: cn('content', contentClassName), visible: visible && loaded, hideTopBar: true, onClose: onClose },
        React.createElement("header", { className: cn('header') },
            React.createElement("h2", { className: cn('title') }, title),
            React.createElement(Button, { className: cn('close-button'), size: "xl", view: "flat-contrast", onClick: handleCloseClick, extraProps: closeButtonExtraProps },
                React.createElement(Icon, { data: Xmark, size: 24 }))),
        React.createElement("p", { className: cn('message') }, message),
        imageSrc && (React.createElement("div", { className: cn('image-container', imageContainerClassName) },
            React.createElement("img", { role: "presentation", className: cn('image', imageClassName), src: imageSrc, alt: "", width: imageSizes === null || imageSizes === void 0 ? void 0 : imageSizes.width, height: imageSizes === null || imageSizes === void 0 ? void 0 : imageSizes.height }))),
        React.createElement("div", { className: cn('actions') },
            React.createElement(Button, { className: cn('action-button'), size: "xl", view: "outlined-contrast", width: "max", href: actionHref, onClick: handleActionClick }, actionText))));
}
