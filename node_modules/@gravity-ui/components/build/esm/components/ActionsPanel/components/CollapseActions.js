import React from 'react';
import { Ellipsis } from '@gravity-ui/icons';
import { Button, DropdownMenu, Icon } from '@gravity-ui/uikit';
import { block } from '../../utils/cn';
import { OBSERVER_TARGET_ATTR, useCollapseActions } from './hooks';
import './CollapseActions.css';
const b = block('actions-panel-collapse');
export const CollapseActions = ({ actions }) => {
    const { buttonActions, dropdownItems, parentRef, offset, visibilityMap } = useCollapseActions(actions);
    const showDropdown = Object.keys(visibilityMap).length > 0 && dropdownItems.length > 0;
    return (React.createElement("div", { className: b() },
        React.createElement("div", { className: b('container'), ref: parentRef }, buttonActions.map((action) => {
            const { id } = action;
            const attr = { [OBSERVER_TARGET_ATTR]: id };
            const invisible = visibilityMap[id] === false;
            const switcher = (React.createElement(Button, Object.assign({ view: "flat-contrast", size: "m" }, action.button.props)));
            const node = Array.isArray(action.dropdown.item.items) ? (React.createElement(DropdownMenu, { size: "s", items: action.dropdown.item.items, switcher: switcher })) : (switcher);
            return (React.createElement("div", Object.assign({ className: b('button-action-wrapper', { invisible }) }, attr, { key: id }), node));
        })),
        showDropdown && (React.createElement(React.Fragment, null,
            React.createElement("div", { className: b('menu-placeholder') }),
            React.createElement("div", { className: b('menu-wrapper'), style: { insetInlineStart: offset } },
                React.createElement(DropdownMenu, { size: "s", items: dropdownItems, switcher: React.createElement(Button, { view: "flat-contrast", size: "m" },
                        React.createElement(Icon, { data: Ellipsis })) }))))));
};
