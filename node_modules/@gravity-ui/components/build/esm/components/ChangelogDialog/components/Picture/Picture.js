import React from 'react';
import { Loader } from '@gravity-ui/uikit';
import { block } from '../../../utils/cn';
import './Picture.css';
const b = block('changelog-dialog-picture');
const SHOW_LOADER_TIMEOUT = 150;
export function Picture({ className, src, alt = '', ratio }) {
    const [loadingState, setLoadingState] = React.useState('loading');
    const [isVisibleLoader, setIsVisibleLoader] = React.useState(false);
    React.useEffect(() => {
        setLoadingState('loading');
        setIsVisibleLoader(false);
        const img = new Image();
        img.onload = () => {
            setLoadingState('loaded');
        };
        img.onerror = img.onabort = () => {
            setLoadingState('error');
        };
        img.src = src;
        const timeoutId = setTimeout(() => {
            setIsVisibleLoader(true);
        }, SHOW_LOADER_TIMEOUT);
        return () => {
            clearTimeout(timeoutId);
        };
    }, [src]);
    if (loadingState === 'error') {
        return null;
    }
    return (React.createElement("div", { className: b(null, className) }, ratio ? (React.createElement("div", { className: b('placeholder'), style: loadingState === 'loading' ? { paddingBottom: `${ratio * 100}%` } : {} },
        isVisibleLoader && loadingState === 'loading' ? (React.createElement("div", { className: b('loader') },
            React.createElement(Loader, { size: "s" }))) : null,
        React.createElement("img", { className: b('image-with-ratio', {
                visible: loadingState === 'loaded',
            }), src: src, alt: alt }))) : (React.createElement("img", { className: b('image'), src: src, alt: alt }))));
}
