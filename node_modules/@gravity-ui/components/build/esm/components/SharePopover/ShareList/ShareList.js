import React from 'react';
import { Link } from '@gravity-ui/icons';
import { Button, CopyToClipboard, Icon } from '@gravity-ui/uikit';
import { block } from '../../utils/cn';
import { isOfType } from '../../utils/isOfType';
import { ShareListItem } from '../ShareListItem/ShareListItem';
import { i18n } from '../i18n';
import './ShareList.css';
const b = block('share-list');
const isShareListItemComponent = isOfType(ShareListItem);
export class ShareList extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            copied: false,
        };
        this.copyLink = null;
        this.copyLinkRef = (element) => {
            this.copyLink = element;
        };
    }
    componentDidMount() {
        if (this.props.withCopyLink && this.copyLink) {
            this.copyLink.style.width = `${this.copyLink.scrollWidth}px`;
        }
    }
    render() {
        const { shareOptions, withCopyLink, className, direction, children } = this.props;
        const hasShareOptions = Array.isArray(shareOptions) && shareOptions.length > 0;
        const extensions = React.Children.toArray(children).filter((child) => isShareListItemComponent(child));
        return (React.createElement("div", { className: b({ layout: direction }, className) },
            React.createElement("div", { className: b('options-container') },
                hasShareOptions && this.renderShareOptionsLinks(),
                Boolean(extensions === null || extensions === void 0 ? void 0 : extensions.length) && extensions),
            hasShareOptions && withCopyLink && React.createElement("div", { className: b('separator') }),
            withCopyLink && this.renderCopyLink()));
    }
    renderShareOptionsLinks() {
        const { url, title, text, shareOptions, direction } = this.props;
        return (React.createElement("div", { className: b('option') }, shareOptions.map((type) => (React.createElement(ShareListItem, { key: type, type: type, url: url, title: title, text: text, className: b('link'), direction: direction })))));
    }
    renderCopyLink() {
        const { url, copyIcon, copyTitle, renderCopy } = this.props;
        const { copied } = this.state;
        const label = copyTitle || (copied ? i18n('label_copy-link-copied') : i18n('label_copy-link'));
        return (React.createElement("div", { className: b('copy-link') }, renderCopy ? (renderCopy({
            url,
            title: label,
            icon: copyIcon || Link,
        })) : (React.createElement(CopyToClipboard, { text: this.props.url, timeout: 1500 }, (status) => (React.createElement(Button, { ref: this.copyLinkRef, view: "flat-secondary", size: "l", disabled: status === 'success', width: "max" },
            React.createElement(Icon, { data: copyIcon || Link, size: 16 }),
            label))))));
    }
}
ShareList.defaultProps = {
    shareOptions: [],
    withCopyLink: false,
};
ShareList.Item = ShareListItem;
