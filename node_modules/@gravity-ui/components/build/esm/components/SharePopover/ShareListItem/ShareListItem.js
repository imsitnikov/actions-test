var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Button, Icon } from '@gravity-ui/uikit';
import { block } from '../../utils/cn';
import { ShareOptions } from '../constants';
import { i18n } from '../i18n';
import * as icons from '../icons';
import './ShareListItem.css';
const b = block('share-list-item');
export class ShareListItem extends React.PureComponent {
    render() {
        var _a;
        const _b = this.props, { type, direction, className, label, getShareLink } = _b, rest = __rest(_b, ["type", "direction", "className", "label", "getShareLink"]);
        const icon = this.props.icon || (type && icons[type]);
        const url = (_a = getShareLink === null || getShareLink === void 0 ? void 0 : getShareLink(rest)) !== null && _a !== void 0 ? _a : (type && this.getShareLink(type));
        const typeModifier = type === null || type === void 0 ? void 0 : type.toLowerCase();
        const name = label || (type && ShareOptions[type]);
        if (!url) {
            return null;
        }
        if (direction === 'column') {
            return (React.createElement(Button, { view: "flat", size: "l", href: url, target: "_blank", width: "max", className: b(null, className), extraProps: { 'aria-label': i18n('label_share', { name }) } },
                icon && (React.createElement(Icon, { data: icon, size: 16, className: b('icon', { type: typeModifier }) })),
                name && React.createElement("span", { className: b(null, className) }, name)));
        }
        return (React.createElement(Button, { view: "flat", size: "l", href: url, target: "_blank", className: b(null, className), extraProps: { 'aria-label': i18n('label_share', { name }) } }, icon && React.createElement(Icon, { data: icon, size: 24, className: b('icon', { type: typeModifier }) })));
    }
    getShareLink(type) {
        const { url, title, text } = this.props;
        // https://github.com/bradvin/social-share-urls
        switch (type) {
            case ShareOptions.Telegram:
                return this.getShareUrlWithParams('https://t.me/share/url', { url, text: title });
            case ShareOptions.Facebook:
                return this.getShareUrlWithParams('https://facebook.com/sharer.php', { u: url });
            case ShareOptions.Twitter:
                return this.getShareUrlWithParams('https://twitter.com/intent/tweet', {
                    url,
                    text: title,
                });
            case ShareOptions.VK:
                return this.getShareUrlWithParams('https://vk.com/share.php', {
                    url,
                    title,
                    comment: text,
                });
            case ShareOptions.LinkedIn:
                return this.getShareUrlWithParams('https://www.linkedin.com/sharing/share-offsite/', {
                    url,
                });
            case ShareOptions.Mail:
                return this.getShareUrlWithParams('mailto:', {
                    subject: title,
                    body: text ? `${text}\n${url}` : url,
                });
            default:
                console.error(`Unknown share type: ${type}`);
                return null;
        }
    }
    getShareUrlWithParams(url, params = {}) {
        const result = new URL(url);
        Object.entries(params).forEach(([name, value]) => {
            if (value) {
                result.searchParams.set(name, value);
            }
        });
        return result.toString();
    }
}
