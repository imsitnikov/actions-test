import React from 'react';
import { NodesRight } from '@gravity-ui/icons';
import { Icon, Popover, useUniqId } from '@gravity-ui/uikit';
import { block } from '../utils/cn';
import { ShareList } from './ShareList/ShareList';
import { LayoutDirection } from './constants';
import './SharePopover.css';
const b = block('share-popover');
const DEFAULT_ICON_SIZE = 16; // px
const DEFAULT_CLOSE_DELAY = 300; // ms
const DEFAULT_PLACEMENT = 'bottom-end';
export const sharePopoverDefaultProps = {
    iconSize: DEFAULT_ICON_SIZE,
    shareOptions: ShareList.defaultProps.shareOptions,
    withCopyLink: true,
    useWebShareApi: false,
    placement: [DEFAULT_PLACEMENT],
    openByHover: true,
    autoclosable: true,
    closeDelay: DEFAULT_CLOSE_DELAY,
    direction: LayoutDirection.Row,
};
export const SharePopover = (props) => {
    const { url, title, text, shareOptions = sharePopoverDefaultProps.shareOptions, withCopyLink = sharePopoverDefaultProps.withCopyLink, useWebShareApi = sharePopoverDefaultProps.useWebShareApi, placement = sharePopoverDefaultProps.placement, openByHover = sharePopoverDefaultProps.openByHover, autoclosable = sharePopoverDefaultProps.autoclosable, closeDelay = sharePopoverDefaultProps.closeDelay, iconSize = sharePopoverDefaultProps.iconSize, iconClass, tooltipClassName, tooltipContentClassName, switcherClassName, className, direction = sharePopoverDefaultProps.direction, customIcon, buttonTitle, copyTitle, copyIcon, renderCopy, children, onClick, } = props;
    const [isOpen, setIsOpen] = React.useState(false);
    const tooltipId = useUniqId();
    const content = React.useMemo(() => (React.createElement(ShareList, { url: url, title: title, text: text, shareOptions: shareOptions, withCopyLink: withCopyLink, direction: direction, copyTitle: copyTitle, copyIcon: copyIcon, renderCopy: renderCopy }, children)), [
        children,
        copyIcon,
        copyTitle,
        direction,
        renderCopy,
        shareOptions,
        text,
        title,
        url,
        withCopyLink,
    ]);
    const handleClick = React.useCallback(async (event) => {
        if (onClick) {
            onClick(event);
        }
        if (useWebShareApi && navigator && typeof navigator.share === 'function') {
            await navigator.share({ url, title, text });
            event.preventDefault();
            return false;
        }
        return true;
    }, [onClick, text, title, url, useWebShareApi]);
    return (React.createElement(Popover, { placement: placement, hasArrow: false, openOnHover: openByHover && !useWebShareApi, autoclosable: autoclosable, delayClosing: closeDelay, content: content, className: b(null, className), tooltipClassName: b('tooltip', tooltipClassName), tooltipContentClassName: b('tooltip-content', tooltipContentClassName), onClick: handleClick, tooltipId: tooltipId, disablePortal: true, onOpenChange: setIsOpen }, ({ onClick: onClickInner }) => (React.createElement("button", { className: b('container', switcherClassName), "aria-expanded": openByHover ? undefined : isOpen, "aria-controls": tooltipId, "aria-describedby": tooltipId, onClick: onClickInner },
        React.createElement("div", { className: b('icon-container') },
            React.createElement(Icon, { data: customIcon ? customIcon : NodesRight, size: iconSize, className: b('icon', iconClass) })),
        Boolean(buttonTitle) && React.createElement("div", { className: b('title') }, buttonTitle)))));
};
