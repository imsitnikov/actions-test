/* Source https://github.com/sciactive/tinygesture/blob/master/src/TinyGesture.ts */
const DEFAULT_OPTIONS = {
    velocityThreshold: 10,
    pressThreshold: 8,
};
export class HorizontalSwiper {
    constructor(elem, options) {
        this.touchMoveX = null;
        this.touchStartX = null;
        this.touchStartY = null;
        this.touchEndX = null;
        this.touchEndY = null;
        this.velocityX = null;
        this.thresholdX = 0;
        this.disregardVelocityThresholdX = 0;
        this.swipedHorizontal = false;
        this.handlers = {
            panstart: [],
            panmove: [],
            panend: [],
            swipeleft: [],
            swiperight: [],
        };
        this._onTouchStart = this.onTouchStart.bind(this);
        this._onTouchMove = this.onTouchMove.bind(this);
        this._onTouchEnd = this.onTouchEnd.bind(this);
        this.element = elem;
        this.opts = Object.assign({}, DEFAULT_OPTIONS, options);
        this.element.addEventListener('touchstart', this._onTouchStart);
        this.element.addEventListener('touchmove', this._onTouchMove);
        this.element.addEventListener('touchend', this._onTouchEnd);
        if (!('ontouchstart' in window)) {
            this.element.addEventListener('mousedown', this._onTouchStart);
            document.addEventListener('mousemove', this._onTouchMove);
            document.addEventListener('mouseup', this._onTouchEnd);
        }
    }
    get getTouchMoveX() {
        return this.touchMoveX;
    }
    destroy() {
        this.element.removeEventListener('touchstart', this._onTouchStart);
        this.element.removeEventListener('touchmove', this._onTouchMove);
        this.element.removeEventListener('touchend', this._onTouchEnd);
        this.element.removeEventListener('mousedown', this._onTouchStart);
        document.removeEventListener('mousemove', this._onTouchMove);
        document.removeEventListener('mouseup', this._onTouchEnd);
    }
    on(type, fn) {
        if (!this.handlers[type])
            return;
        this.handlers[type].push(fn);
        return {
            type,
            fn,
            cancel: () => this.off(type, fn),
        };
    }
    off(type, fn) {
        if (this.handlers[type]) {
            const idx = this.handlers[type].indexOf(fn);
            if (idx !== -1) {
                this.handlers[type].splice(idx, 1);
            }
        }
    }
    fire(type, event) {
        for (let i = 0; i < this.handlers[type].length; i++) {
            this.handlers[type][i](event);
        }
    }
    onTouchStart(event) {
        this.thresholdX = this.threshold();
        this.disregardVelocityThresholdX = this.disregardVelocityThreshold(this);
        this.touchStartX =
            event.type === 'mousedown'
                ? event.screenX
                : event.changedTouches[0].screenX;
        this.touchStartY =
            event.type === 'mousedown'
                ? event.screenY
                : event.changedTouches[0].screenY;
        this.touchMoveX = null;
        this.touchEndX = null;
        this.touchEndY = null;
        this.fire('panstart', event);
    }
    onTouchMove(event) {
        var _a, _b;
        if (event.type === 'mousemove' && (!this.touchStartX || this.touchEndX !== null)) {
            return;
        }
        const touchMoveX = (event.type === 'mousemove'
            ? event.screenX
            : event.changedTouches[0].screenX) - ((_a = this.touchStartX) !== null && _a !== void 0 ? _a : 0);
        this.velocityX = touchMoveX - ((_b = this.touchMoveX) !== null && _b !== void 0 ? _b : 0);
        this.touchMoveX = touchMoveX;
        this.fire('panmove', event);
    }
    onTouchEnd(event) {
        var _a, _b, _c, _d;
        if (event.type === 'mouseup' && (!this.touchStartX || this.touchEndX !== null)) {
            return;
        }
        this.touchEndX =
            event.type === 'mouseup'
                ? event.screenX
                : event.changedTouches[0].screenX;
        this.touchEndY =
            event.type === 'mouseup'
                ? event.screenY
                : event.changedTouches[0].screenY;
        this.fire('panend', event);
        const x = this.touchEndX - ((_a = this.touchStartX) !== null && _a !== void 0 ? _a : 0);
        const absX = Math.abs(x);
        const y = this.touchEndY - ((_b = this.touchStartY) !== null && _b !== void 0 ? _b : 0);
        const absY = Math.abs(y);
        if (absX > this.thresholdX) {
            this.swipedHorizontal = absX >= absY && absX > this.thresholdX;
            if (this.swipedHorizontal) {
                if (x < 0) {
                    // Left swipe.
                    if (((_c = this.velocityX) !== null && _c !== void 0 ? _c : 0) < -this.opts.velocityThreshold ||
                        x < -this.disregardVelocityThresholdX) {
                        this.fire('swipeleft', event);
                    }
                }
                else {
                    // Right swipe.
                    if (((_d = this.velocityX) !== null && _d !== void 0 ? _d : 0) > this.opts.velocityThreshold ||
                        x > this.disregardVelocityThresholdX) {
                        this.fire('swiperight', event);
                    }
                }
            }
        }
    }
    threshold() {
        return Math.max(25, Math.floor(0.15 * (window.innerWidth || document.body.clientWidth)));
    }
    disregardVelocityThreshold(self) {
        return Math.floor(0.5 * self.element.clientWidth);
    }
}
