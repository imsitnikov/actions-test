import React from 'react';
import { Icon, Link, useMobile } from '@gravity-ui/uikit';
import { block } from '../utils/cn';
import './Notification.css';
const b = block('notification');
export const Notification = React.memo(function Notification(props) {
    const mobile = useMobile();
    const { notification } = props;
    const { title, content, formattedDate, source, unread, theme } = notification;
    const modifiers = { unread, theme, mobile, active: Boolean(notification.onClick) };
    const sourceIcon = source && renderSourceIcon(source);
    return (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    React.createElement("div", { className: b(modifiers, notification.className), onMouseEnter: notification.onMouseEnter, onMouseLeave: notification.onMouseLeave, onClick: notification.onClick },
        sourceIcon ? React.createElement("div", { className: b('left') }, sourceIcon) : null,
        React.createElement("div", { className: b('right') },
            React.createElement("div", { className: b('right-top-part') },
                React.createElement("div", { className: b('right-meta-and-title') },
                    React.createElement("div", { className: b('right-meta') },
                        (source === null || source === void 0 ? void 0 : source.title) ? renderSourceTitle(source.title, source.href) : null,
                        (source === null || source === void 0 ? void 0 : source.title) && formattedDate ? React.createElement("span", null, "\u2022") : null,
                        formattedDate ? (React.createElement("div", { className: b('right-date') }, formattedDate)) : null),
                    title ? React.createElement("div", { className: b('right-title') }, title) : null),
                React.createElement("div", { className: b('actions', { 'right-side-actions': true }) }, props.notification.sideActions)),
            React.createElement("div", { className: b('right-content') }, content),
            props.notification.bottomActions ? (React.createElement("div", { className: b('actions', { 'right-bottom-actions': true }) }, props.notification.bottomActions)) : null)));
});
function renderSourceTitle(title, href) {
    return href ? (React.createElement(Link, { className: b('right-source-title'), href: href, target: "_blank", title: title }, title)) : (React.createElement("div", { className: b('right-source-title'), title: title }, title));
}
function renderSourceIcon(source) {
    const iconElement = getIconElement(source);
    if (!iconElement)
        return null;
    return source.href ? (React.createElement(Link, { href: source.href, target: "_blank" }, iconElement)) : (iconElement);
}
function getIconElement(source) {
    if ('icon' in source && source.icon) {
        return React.createElement(Icon, { className: b('source-icon'), size: 36, data: source.icon });
    }
    else if ('imageSrc' in source && source.imageSrc) {
        return React.createElement("img", { alt: "", className: b('source-icon'), src: source.imageSrc });
    }
    else {
        return null;
    }
}
