import React from 'react';
import { block } from '../utils/cn';
import { PlaceholderContainerAction } from './PlaceholderContainerAction';
import { Align, Direction, componentClassName } from './constants';
import './PlaceholderContainer.css';
const b = block(componentClassName);
export class PlaceholderContainer extends React.Component {
    render() {
        const { direction, align, size } = this.props;
        const className = this.props.className || b();
        return (React.createElement("div", { className: b({ direction, align, size }, [className]) },
            React.createElement("div", { className: b('body') },
                React.createElement("div", { className: b('image', { size }) }, this.renderImage()),
                this.renderContent())));
    }
    renderImage() {
        if (typeof this.props.image === 'object' && 'url' in this.props.image) {
            const image = this.props.image;
            return React.createElement("img", { src: image.url, alt: image.alt || '' });
        }
        return this.props.image;
    }
    renderContent() {
        const { size } = this.props;
        const content = this.props.renderContent ? (this.props.renderContent()) : (React.createElement(React.Fragment, null,
            this.renderTitle(),
            this.renderDescription()));
        return (React.createElement("div", { className: b('content', { size }) },
            content,
            this.renderAction()));
    }
    renderTitle() {
        const { title } = this.props;
        if (!title) {
            return null;
        }
        return React.createElement("div", { className: b('title') }, title);
    }
    renderDescription() {
        const { description } = this.props;
        if (!description) {
            return null;
        }
        return React.createElement("div", { className: b('description') }, description);
    }
    renderAction() {
        const { action, renderAction } = this.props;
        if (renderAction) {
            return renderAction();
        }
        if (!action) {
            return null;
        }
        if (Array.isArray(action)) {
            if (!action.length) {
                return null;
            }
            return (React.createElement("div", { className: b('actions') }, action.map((actionItem) => (React.createElement(PlaceholderContainerAction, { key: actionItem.text, action: actionItem })))));
        }
        return (React.createElement("div", { className: b('actions') },
            React.createElement(PlaceholderContainerAction, { action: action })));
    }
}
PlaceholderContainer.Direction = Direction;
PlaceholderContainer.Align = Align;
PlaceholderContainer.defaultProps = {
    size: 'l',
    direction: Direction.Row,
    align: Align.Center,
};
