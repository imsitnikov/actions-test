import React from 'react';
import { InfiniteScroll } from '../InfiniteScroll';
import { block } from '../utils/cn';
import { NotificationsEmptyState } from './NotificationsEmptyState';
import { NotificationsErrorState } from './NotificationsErrorState';
import { NotificationsList } from './NotificationsList';
import { NotificationsLoadingState } from './NotificationsLoadingState';
import { i18n } from './i18n';
import './Notifications.css';
const b = block('notifications');
export const Notifications = React.memo(function Notifications(props) {
    var _a, _b;
    let content;
    const visibleNotificationsCount = props.notifications.filter((n) => !n.archived).length;
    const hasUnloadedNotifications = !props.areAllNotificationsLoaded && props.onLoadMoreNotifications;
    if (props.isLoading) {
        content = React.createElement(NotificationsLoadingState, null);
    }
    else if (visibleNotificationsCount > 0 || hasUnloadedNotifications) {
        content = (React.createElement(InfiniteScroll, { onActivate: (_a = props.onLoadMoreNotifications) !== null && _a !== void 0 ? _a : noop, disabled: (_b = props.areAllNotificationsLoaded) !== null && _b !== void 0 ? _b : true },
            React.createElement(NotificationsList, { notifications: props.notifications, swipeThreshold: props.swipeThreshold })));
    }
    else if (props.errorContent) {
        content = (React.createElement(NotificationsErrorState, { image: props.errorImage, title: props.errorTitle, content: props.errorContent }));
    }
    else {
        content = (React.createElement(NotificationsEmptyState, { image: props.emptyImage, title: props.emptyTitle, content: props.emptyContent }));
    }
    return (React.createElement("div", { className: b() },
        React.createElement("div", { className: b('head') },
            React.createElement("div", { className: b('head-title') }, props.title || i18n('title')),
            React.createElement("div", { className: b('actions') }, props.actions)),
        React.createElement("div", { className: b('body') }, content)));
});
async function noop() { }
