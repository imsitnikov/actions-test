import React from 'react';
import { useMobile } from '@gravity-ui/uikit';
import { Notification } from '../Notification';
import { NotificationWithSwipe } from '../Notification/NotificationWithSwipe';
import { block } from '../utils/cn';
import './Notifications.css';
const b = block('notifications');
export const NotificationWrapper = (props) => {
    const ref = React.useRef(null);
    const { notification, swipeThreshold } = props;
    const mobile = useMobile();
    const [wrapperMaxHeight, setWrapperMaxHeight] = React.useState(undefined);
    const [isRemoved, setIsRemoved] = React.useState(false);
    React.useEffect(() => {
        if (!ref.current) {
            if (!notification.archived && isRemoved) {
                setIsRemoved(false);
            }
            return () => { };
        }
        if (notification.archived) {
            const listener = (event) => {
                var _a;
                if (event.propertyName === 'max-height') {
                    setIsRemoved(true);
                    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', listener);
                }
            };
            ref.current.addEventListener('transitionend', listener);
            ref.current.style.transition = 'max-height 0.3s';
            setWrapperMaxHeight(0);
            return () => {
                var _a;
                (_a = ref.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', listener);
            };
        }
        else {
            setIsRemoved(false);
            setTimeout(() => {
                var _a, _b;
                if (!ref.current)
                    return;
                ref.current.style.transition = 'none';
                ref.current.style.maxHeight = 'none';
                const maxHeight = (_b = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().height) !== null && _b !== void 0 ? _b : 0;
                setWrapperMaxHeight(maxHeight);
            }, 0);
            return () => { };
        }
    }, [ref, notification.archived, isRemoved]);
    const style = wrapperMaxHeight === undefined ? {} : { maxHeight: `${wrapperMaxHeight}px` };
    if (isRemoved) {
        return null;
    }
    return (React.createElement("div", { className: b('notification-wrapper', {
            archived: notification.archived,
            unread: notification.unread,
            active: Boolean(notification.onClick),
        }), ref: ref, style: style }, mobile && notification.swipeActions ? (React.createElement(NotificationWithSwipe, { notification: notification, swipeThreshold: swipeThreshold })) : (React.createElement(Notification, { notification: notification }))));
};
