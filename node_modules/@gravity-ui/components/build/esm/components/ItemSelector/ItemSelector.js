import React from 'react';
import { Xmark } from '@gravity-ui/icons';
import { Button, Icon, List } from '@gravity-ui/uikit';
import { block } from '../utils/cn';
import { i18n } from './i18n';
import './ItemSelector.css';
const b = block('item-selector');
function getItemIdDefault(item) {
    return `${item}`;
}
export class ItemSelector extends React.Component {
    constructor() {
        super(...arguments);
        this.renderItemTitle = (item) => {
            const { renderItemValue, getItemId } = this.props;
            if (renderItemValue) {
                return renderItemValue(item);
            }
            return getItemId(item);
        };
        this.renderItem = (item, active) => (React.createElement("div", { className: b('item', { active }) },
            React.createElement("span", { className: b('item-text') }, this.renderItemTitle(item)),
            React.createElement(Button, { view: "flat-secondary", size: "s", className: b('item-select'), onClick: this.onAddItem.bind(this, item) }, i18n('button_select'))));
        this.filterItem = (filter) => (item) => {
            const { getItemId } = this.props;
            return getItemId(item).includes(filter);
        };
        this.renderValueItem = (item, active) => (React.createElement("div", { className: b('value-item', { active }) },
            React.createElement("span", { className: b('value-item-text') }, this.renderItemTitle(item)),
            React.createElement(Button, { view: "flat-secondary", size: "s", className: b('value-item-remove'), onClick: () => this.onRemoveItem(item) },
                React.createElement(Icon, { data: Xmark, size: 16 }))));
        this.onAddItem = (item) => {
            const { getItemId, value } = this.props;
            const itemId = getItemId(item);
            const usedItems = new Set(value);
            const newValue = usedItems.has(itemId) ? value : [...value, itemId];
            setTimeout(() => {
                this.onUpdate(newValue);
            }, 0);
        };
        this.onRemoveItem = (item) => {
            const { value, getItemId } = this.props;
            const itemId = getItemId(item);
            const newValue = value.filter((id) => id !== itemId);
            setTimeout(() => {
                this.onUpdate(newValue);
            }, 0);
        };
        this.onErase = () => {
            this.onUpdate([]);
        };
        this.onSelectAll = () => {
            const { items, getItemId } = this.props;
            const value = items.map(getItemId);
            this.onUpdate(value);
        };
        this.onMoveItem = ({ oldIndex, newIndex }) => {
            if (oldIndex !== newIndex) {
                const value = this.props.value.slice();
                this.onUpdate(List.moveListElement(value, oldIndex, newIndex));
            }
        };
        this.onUpdate = (value) => {
            this.props.onUpdate(value);
        };
    }
    getActualItems() {
        const { items, value, hideSelected, getItemId } = this.props;
        const actualItems = [];
        const selectedItems = new Array(value.length);
        const usedItems = new Map(value.map((id, index) => [id, index]));
        for (const item of items) {
            const selected = usedItems.get(getItemId(item));
            if (selected !== undefined) {
                selectedItems[selected] = item;
            }
            if (!hideSelected || selected === undefined) {
                actualItems.push(item);
            }
        }
        return [actualItems, selectedItems];
    }
    render() {
        const { value, selectorTitle, renderItem = this.renderItem, filterItem = this.filterItem, hideSelectAllButton, } = this.props;
        const [items, selected] = this.getActualItems();
        return (React.createElement("div", { className: b() },
            React.createElement("div", { className: b('list') },
                React.createElement("div", { className: b('list-header') },
                    React.createElement("span", { className: b('list-title') }, selectorTitle),
                    !hideSelectAllButton && (React.createElement(Button, { view: "flat", size: "s", disabled: items.length === 0, onClick: this.onSelectAll }, i18n('button_select-all')))),
                React.createElement(List, { items: items, renderItem: renderItem, filterItem: filterItem, filterPlaceholder: i18n('placeholder_search'), itemsHeight: 196 })),
            React.createElement("div", { className: b('list') },
                React.createElement("div", { className: b('list-header') },
                    React.createElement("span", { className: b('list-title') }, `${i18n('label_selected')}: ${value.length}`),
                    React.createElement(Button, { view: "flat", size: "s", disabled: value.length === 0, onClick: this.onErase }, i18n('button_deselect-all'))),
                React.createElement(List, { items: selected, renderItem: this.renderValueItem, filterItem: filterItem, filterPlaceholder: i18n('placeholder_search'), sortable: true, onSortEnd: this.onMoveItem, itemsHeight: 196 }))));
    }
}
ItemSelector.defaultProps = {
    hideSelected: true,
    selectorTitle: '',
    getItemId: getItemIdDefault,
};
