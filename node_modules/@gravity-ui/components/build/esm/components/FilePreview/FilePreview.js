import React from 'react';
import { FileZipper as ArchiveIcon, Code as CodeIcon, FileQuestion as DefaultIcon, Picture as ImageIcon, MusicNote as MusicIcon, LogoAcrobat as PdfIcon, LayoutHeaderCellsLarge as TableIcon, TextAlignLeft as TextIcon, Filmstrip as VideoIcon, } from '@gravity-ui/icons';
import { Icon, Text, useActionHandlers, useUniqId } from '@gravity-ui/uikit';
import { block } from '../utils/cn';
import { FilePreviewAction } from './FilePreviewAction';
import { getFileType } from './utils';
import './FilePreview.css';
const cn = block('file-preview');
const FILE_ICON = {
    default: DefaultIcon,
    image: ImageIcon,
    video: VideoIcon,
    code: CodeIcon,
    archive: ArchiveIcon,
    music: MusicIcon,
    text: TextIcon,
    pdf: PdfIcon,
    table: TableIcon,
};
export function FilePreview({ className, qa, file, imageSrc, description, onClick, actions, }) {
    const id = useUniqId();
    const [previewSrc, setPreviewSrc] = React.useState(imageSrc);
    const type = getFileType(file);
    const { onKeyDown } = useActionHandlers(onClick);
    React.useEffect(() => {
        if (imageSrc)
            return undefined;
        try {
            const createdUrl = URL.createObjectURL(file);
            setPreviewSrc(createdUrl);
            return () => {
                URL.revokeObjectURL(createdUrl);
            };
        }
        catch (error) {
            return undefined;
        }
    }, [file, imageSrc]);
    const clickable = Boolean(onClick);
    const withActions = Boolean(actions === null || actions === void 0 ? void 0 : actions.length);
    return (React.createElement("div", { className: cn(null, className), "data-qa": qa },
        React.createElement("div", { className: cn('card', { clickable, hoverable: clickable || withActions }), role: clickable ? 'button' : undefined, onKeyDown: clickable ? onKeyDown : undefined, tabIndex: clickable ? 0 : undefined, onClick: onClick },
            typeof previewSrc === 'string' ? (React.createElement("div", { className: cn('image') },
                React.createElement("img", { className: cn('image-img'), src: previewSrc, alt: file.name }))) : (React.createElement("div", { className: cn('icon', { type }) },
                React.createElement(Icon, { className: cn('icon-svg'), data: FILE_ICON[type], size: 20 }))),
            React.createElement(Text, { className: cn('name'), color: "secondary", ellipsis: true, title: file.name }, file.name),
            Boolean(description) && (React.createElement(Text, { className: cn('description'), color: "secondary", ellipsis: true, title: description }, description))),
        (actions === null || actions === void 0 ? void 0 : actions.length) ? (React.createElement("div", { className: cn('actions') }, actions.map((action, index) => (React.createElement(FilePreviewAction, Object.assign({ key: `${id}-${index}`, id: `${id}-${index}` }, action)))))) : null));
}
FilePreview.displayName = 'FilePreview';
