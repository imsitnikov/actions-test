import React from 'react';
import { Xmark } from '@gravity-ui/icons';
import { Button, Icon, Link } from '@gravity-ui/uikit';
import { MediaRenderer } from '..';
import { block } from '../../../utils/cn';
import { i18n } from '../../i18n';
import './StoriesLayout.css';
const b = block('stories-layout');
export var IndexType;
(function (IndexType) {
    IndexType[IndexType["Start"] = 1] = "Start";
    IndexType[IndexType["End"] = 2] = "End";
    IndexType[IndexType["InProccess"] = 3] = "InProccess";
    IndexType[IndexType["Single"] = 4] = "Single";
})(IndexType || (IndexType = {}));
// StoriesGroup component also use it
export const StoriesLayout = (props) => {
    const currentStory = props.items[props.storyIndex];
    return (React.createElement("div", { className: b('wrap-outer') },
        React.createElement("div", { className: b('wrap-inner') },
            React.createElement("div", { className: b('container') },
                React.createElement("div", { className: b('left-pane') },
                    props.items.length > 1 && (React.createElement("div", { className: b('counter') },
                        React.createElement("span", { dir: "ltr" },
                            props.storyIndex + 1,
                            "\u00A0/\u00A0",
                            props.items.length))),
                    React.createElement("div", { className: b('text-block') }, currentStory && (React.createElement(React.Fragment, null,
                        currentStory.title && (React.createElement("div", { className: b('text-header') }, currentStory.title)),
                        currentStory.description && (React.createElement("div", { className: b('text-content') }, currentStory.description)),
                        currentStory.url && (React.createElement("div", { className: b('story-link-block') },
                            React.createElement(Link, { href: currentStory.url, target: '_blank' }, i18n('label_more'))))))),
                    React.createElement("div", { className: b('controls-block') },
                        IndexType.Single === props.indexType ? (React.createElement(Button, { onClick: props.handleButtonClose, size: "l", width: "max" }, i18n('label_close'))) : (React.createElement(React.Fragment, null,
                            IndexType.Start !== props.indexType && (React.createElement(Button, { onClick: props.handleGotoPrevious, view: "outlined", size: "l", width: "max" }, i18n('label_back'))),
                            IndexType.InProccess !== props.indexType && (React.createElement(Button, { onClick: props.handleButtonClose, size: "l", width: "max" }, i18n('label_close'))),
                            IndexType.End !== props.indexType && (React.createElement(Button, { onClick: props.handleGotoNext, view: "action", size: "l", width: "max" }, i18n('label_next'))))),
                        props.action && React.createElement(Button, Object.assign({ size: "l", width: "max" }, props.action)))),
                React.createElement("div", { className: b('right-pane') },
                    React.createElement(Button, { view: "flat", size: "l", className: b('close-btn'), onClick: props.handleButtonClose },
                        React.createElement(Icon, { data: Xmark, size: 18 })),
                    (currentStory === null || currentStory === void 0 ? void 0 : currentStory.media) && (React.createElement("div", { className: b('media-block') },
                        React.createElement(MediaRenderer, { media: currentStory.media }))))))));
};
