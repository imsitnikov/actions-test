import React from 'react';
import { Eye, EyeSlash } from '@gravity-ui/icons';
import { ActionTooltip, Button, ClipboardButton, Icon, TextInput, } from '@gravity-ui/uikit';
import { block } from '../utils/cn';
import { i18n } from './i18n';
import { getActionButtonSizeAndIconSize } from './utils';
import './PasswordInput.css';
const b = block('password-input');
export const PasswordInput = (props) => {
    const { autoComplete, value, showCopyButton, rightContent, endContent, showRevealButton, size = 'm', hasCopyTooltip = true, hasRevealTooltip = true, controlProps, } = props;
    const [hideValue, setHideValue] = React.useState(true);
    const additionalEndContent = React.useMemo(() => {
        if (!showRevealButton && !showCopyButton) {
            return React.createElement(React.Fragment, null, endContent || rightContent);
        }
        const onClick = () => {
            setHideValue((hideValue) => !hideValue);
        };
        const { actionButtonSize, iconSize } = getActionButtonSizeAndIconSize(size);
        return (React.createElement("div", { className: b('additional-right-content') },
            endContent || rightContent,
            value && showCopyButton ? (React.createElement(ClipboardButton, { view: "flat-secondary", text: value, hasTooltip: hasRevealTooltip, size: actionButtonSize, className: b('copy-button') })) : null,
            showRevealButton ? (React.createElement(ActionTooltip, { disabled: !hasCopyTooltip, title: hideValue ? i18n('label_show-password') : i18n('label_hide-password') },
                React.createElement(Button, { view: "flat-secondary", onClick: onClick, size: actionButtonSize, extraProps: {
                        'aria-label': hideValue
                            ? i18n('label_show-password')
                            : i18n('label_hide-password'),
                    } },
                    React.createElement(Icon, { data: hideValue ? Eye : EyeSlash, size: iconSize })))) : null));
    }, [
        showRevealButton,
        showCopyButton,
        endContent,
        rightContent,
        value,
        hasRevealTooltip,
        hasCopyTooltip,
        hideValue,
        size,
    ]);
    return (React.createElement(TextInput, Object.assign({}, props, { type: hideValue ? 'password' : 'text', endContent: additionalEndContent, autoComplete: autoComplete ? autoComplete : 'new-password', controlProps: Object.assign(Object.assign({}, controlProps), { className: b('input-control', controlProps === null || controlProps === void 0 ? void 0 : controlProps.className) }) })));
};
