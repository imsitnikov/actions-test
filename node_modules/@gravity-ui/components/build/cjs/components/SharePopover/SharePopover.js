"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharePopover = exports.sharePopoverDefaultProps = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../utils/cn");
const ShareList_1 = require("./ShareList/ShareList");
const constants_1 = require("./constants");
require("./SharePopover.css");
const b = (0, cn_1.block)('share-popover');
const DEFAULT_ICON_SIZE = 16; // px
const DEFAULT_CLOSE_DELAY = 300; // ms
const DEFAULT_PLACEMENT = 'bottom-end';
exports.sharePopoverDefaultProps = {
    iconSize: DEFAULT_ICON_SIZE,
    shareOptions: ShareList_1.ShareList.defaultProps.shareOptions,
    withCopyLink: true,
    useWebShareApi: false,
    placement: [DEFAULT_PLACEMENT],
    openByHover: true,
    autoclosable: true,
    closeDelay: DEFAULT_CLOSE_DELAY,
    direction: constants_1.LayoutDirection.Row,
};
const SharePopover = (props) => {
    const { url, title, text, shareOptions = exports.sharePopoverDefaultProps.shareOptions, withCopyLink = exports.sharePopoverDefaultProps.withCopyLink, useWebShareApi = exports.sharePopoverDefaultProps.useWebShareApi, placement = exports.sharePopoverDefaultProps.placement, openByHover = exports.sharePopoverDefaultProps.openByHover, autoclosable = exports.sharePopoverDefaultProps.autoclosable, closeDelay = exports.sharePopoverDefaultProps.closeDelay, iconSize = exports.sharePopoverDefaultProps.iconSize, iconClass, tooltipClassName, tooltipContentClassName, switcherClassName, className, direction = exports.sharePopoverDefaultProps.direction, customIcon, buttonTitle, copyTitle, copyIcon, renderCopy, children, onClick, } = props;
    const [isOpen, setIsOpen] = react_1.default.useState(false);
    const tooltipId = (0, uikit_1.useUniqId)();
    const content = react_1.default.useMemo(() => (react_1.default.createElement(ShareList_1.ShareList, { url: url, title: title, text: text, shareOptions: shareOptions, withCopyLink: withCopyLink, direction: direction, copyTitle: copyTitle, copyIcon: copyIcon, renderCopy: renderCopy }, children)), [
        children,
        copyIcon,
        copyTitle,
        direction,
        renderCopy,
        shareOptions,
        text,
        title,
        url,
        withCopyLink,
    ]);
    const handleClick = react_1.default.useCallback(async (event) => {
        if (onClick) {
            onClick(event);
        }
        if (useWebShareApi && navigator && typeof navigator.share === 'function') {
            await navigator.share({ url, title, text });
            event.preventDefault();
            return false;
        }
        return true;
    }, [onClick, text, title, url, useWebShareApi]);
    return (react_1.default.createElement(uikit_1.Popover, { placement: placement, hasArrow: false, openOnHover: openByHover && !useWebShareApi, autoclosable: autoclosable, delayClosing: closeDelay, content: content, className: b(null, className), tooltipClassName: b('tooltip', tooltipClassName), tooltipContentClassName: b('tooltip-content', tooltipContentClassName), onClick: handleClick, tooltipId: tooltipId, disablePortal: true, onOpenChange: setIsOpen }, ({ onClick: onClickInner }) => (react_1.default.createElement("button", { className: b('container', switcherClassName), "aria-expanded": openByHover ? undefined : isOpen, "aria-controls": tooltipId, "aria-describedby": tooltipId, onClick: onClickInner },
        react_1.default.createElement("div", { className: b('icon-container') },
            react_1.default.createElement(uikit_1.Icon, { data: customIcon ? customIcon : icons_1.NodesRight, size: iconSize, className: b('icon', iconClass) })),
        Boolean(buttonTitle) && react_1.default.createElement("div", { className: b('title') }, buttonTitle)))));
};
exports.SharePopover = SharePopover;
