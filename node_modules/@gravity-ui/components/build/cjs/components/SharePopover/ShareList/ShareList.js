"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShareList = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../utils/cn");
const isOfType_1 = require("../../utils/isOfType");
const ShareListItem_1 = require("../ShareListItem/ShareListItem");
const i18n_1 = require("../i18n");
require("./ShareList.css");
const b = (0, cn_1.block)('share-list');
const isShareListItemComponent = (0, isOfType_1.isOfType)(ShareListItem_1.ShareListItem);
class ShareList extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            copied: false,
        };
        this.copyLink = null;
        this.copyLinkRef = (element) => {
            this.copyLink = element;
        };
    }
    componentDidMount() {
        if (this.props.withCopyLink && this.copyLink) {
            this.copyLink.style.width = `${this.copyLink.scrollWidth}px`;
        }
    }
    render() {
        const { shareOptions, withCopyLink, className, direction, children } = this.props;
        const hasShareOptions = Array.isArray(shareOptions) && shareOptions.length > 0;
        const extensions = react_1.default.Children.toArray(children).filter((child) => isShareListItemComponent(child));
        return (react_1.default.createElement("div", { className: b({ layout: direction }, className) },
            react_1.default.createElement("div", { className: b('options-container') },
                hasShareOptions && this.renderShareOptionsLinks(),
                Boolean(extensions === null || extensions === void 0 ? void 0 : extensions.length) && extensions),
            hasShareOptions && withCopyLink && react_1.default.createElement("div", { className: b('separator') }),
            withCopyLink && this.renderCopyLink()));
    }
    renderShareOptionsLinks() {
        const { url, title, text, shareOptions, direction } = this.props;
        return (react_1.default.createElement("div", { className: b('option') }, shareOptions.map((type) => (react_1.default.createElement(ShareListItem_1.ShareListItem, { key: type, type: type, url: url, title: title, text: text, className: b('link'), direction: direction })))));
    }
    renderCopyLink() {
        const { url, copyIcon, copyTitle, renderCopy } = this.props;
        const { copied } = this.state;
        const label = copyTitle || (copied ? (0, i18n_1.i18n)('label_copy-link-copied') : (0, i18n_1.i18n)('label_copy-link'));
        return (react_1.default.createElement("div", { className: b('copy-link') }, renderCopy ? (renderCopy({
            url,
            title: label,
            icon: copyIcon || icons_1.Link,
        })) : (react_1.default.createElement(uikit_1.CopyToClipboard, { text: this.props.url, timeout: 1500 }, (status) => (react_1.default.createElement(uikit_1.Button, { ref: this.copyLinkRef, view: "flat-secondary", size: "l", disabled: status === 'success', width: "max" },
            react_1.default.createElement(uikit_1.Icon, { data: copyIcon || icons_1.Link, size: 16 }),
            label))))));
    }
}
exports.ShareList = ShareList;
ShareList.defaultProps = {
    shareOptions: [],
    withCopyLink: false,
};
ShareList.Item = ShareListItem_1.ShareListItem;
