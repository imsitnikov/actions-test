"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromoSheet = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../utils/cn");
require("./PromoSheet.css");
const cn = (0, cn_1.block)('promo-sheet');
function PromoSheet({ title, message, actionText, closeText, actionHref, imageSrc, className, contentClassName, imageContainerClassName, imageClassName, onActionClick, onClose, }) {
    const [visible, setVisible] = react_1.default.useState(true);
    const [loaded, setLoaded] = react_1.default.useState(!imageSrc);
    const [imageSizes, setImageSizes] = react_1.default.useState();
    const handleActionClick = react_1.default.useCallback((event) => {
        setVisible(false);
        onActionClick === null || onActionClick === void 0 ? void 0 : onActionClick(event);
    }, [onActionClick]);
    const handleCloseClick = react_1.default.useCallback(() => {
        setVisible(false);
    }, []);
    const closeButtonExtraProps = react_1.default.useMemo(() => ({
        'aria-label': closeText,
    }), [closeText]);
    react_1.default.useEffect(() => {
        if (!imageSrc) {
            setLoaded(true);
            return;
        }
        const image = new Image();
        image.onload = () => {
            setImageSizes({
                width: image.naturalWidth,
                height: image.naturalHeight,
            });
            setLoaded(true);
            image.onload = null;
            image.onerror = null;
        };
        image.onerror = () => {
            setImageSizes(undefined);
            setLoaded(true);
            image.onload = null;
            image.onerror = null;
        };
        image.src = imageSrc;
    }, [imageSrc]);
    return (react_1.default.createElement(uikit_1.Sheet, { className: cn(null, className), contentClassName: cn('content', contentClassName), visible: visible && loaded, hideTopBar: true, onClose: onClose },
        react_1.default.createElement("header", { className: cn('header') },
            react_1.default.createElement("h2", { className: cn('title') }, title),
            react_1.default.createElement(uikit_1.Button, { className: cn('close-button'), size: "xl", view: "flat-contrast", onClick: handleCloseClick, extraProps: closeButtonExtraProps },
                react_1.default.createElement(uikit_1.Icon, { data: icons_1.Xmark, size: 24 }))),
        react_1.default.createElement("p", { className: cn('message') }, message),
        imageSrc && (react_1.default.createElement("div", { className: cn('image-container', imageContainerClassName) },
            react_1.default.createElement("img", { role: "presentation", className: cn('image', imageClassName), src: imageSrc, alt: "", width: imageSizes === null || imageSizes === void 0 ? void 0 : imageSizes.width, height: imageSizes === null || imageSizes === void 0 ? void 0 : imageSizes.height }))),
        react_1.default.createElement("div", { className: cn('actions') },
            react_1.default.createElement(uikit_1.Button, { className: cn('action-button'), size: "xl", view: "outlined-contrast", width: "max", href: actionHref, onClick: handleActionClick }, actionText))));
}
exports.PromoSheet = PromoSheet;
