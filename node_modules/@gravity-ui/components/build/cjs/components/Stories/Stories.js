"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stories = void 0;
const react_1 = __importDefault(require("react"));
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../utils/cn");
const StoriesLayout_1 = require("./components/StoriesLayout/StoriesLayout");
const hooks_1 = require("./hooks");
require("./Stories.css");
const b = (0, cn_1.block)('stories');
function Stories({ open, onClose, items, onPreviousClick, onNextClick, initialStoryIndex = 0, disableOutsideClick = true, className, action, syncInTabsKey, }) {
    const [storyIndex, setStoryIndex] = react_1.default.useState(initialStoryIndex);
    const handleClose = react_1.default.useCallback((event, reason) => {
        onClose === null || onClose === void 0 ? void 0 : onClose(event, reason);
    }, [onClose]);
    const { callback: closeWithLS } = (0, hooks_1.useSyncWithLS)({
        callback: (event, reason) => {
            onClose === null || onClose === void 0 ? void 0 : onClose(event, reason);
        },
        uniqueKey: `close-story-${syncInTabsKey}`,
    });
    const handleButtonClose = react_1.default.useCallback((event) => {
        handleClose(event, 'closeButtonClick');
        if (syncInTabsKey)
            closeWithLS(event, 'closeButtonClick');
    }, [handleClose, syncInTabsKey, closeWithLS]);
    const handleGotoPrevious = react_1.default.useCallback(() => {
        setStoryIndex((currentStoryIndex) => {
            if (currentStoryIndex <= 0) {
                return 0;
            }
            const newIndex = currentStoryIndex - 1;
            onPreviousClick === null || onPreviousClick === void 0 ? void 0 : onPreviousClick(newIndex);
            return newIndex;
        });
    }, [onPreviousClick]);
    const handleGotoNext = react_1.default.useCallback(() => {
        setStoryIndex((currentStoryIndex) => {
            if (currentStoryIndex >= items.length - 1) {
                return items.length - 1;
            }
            const newIndex = currentStoryIndex + 1;
            onNextClick === null || onNextClick === void 0 ? void 0 : onNextClick(newIndex);
            return newIndex;
        });
    }, [items, onNextClick]);
    if (items.length === 0) {
        return null;
    }
    // case when items has changed and index has ceased to be valid
    if (items[storyIndex] === undefined) {
        const correctIndex = items[initialStoryIndex] === undefined ? 0 : initialStoryIndex;
        setStoryIndex(correctIndex);
        return null;
    }
    const indexType = (items.length === 1 && StoriesLayout_1.IndexType.Single) ||
        (storyIndex === 0 && StoriesLayout_1.IndexType.Start) ||
        (storyIndex === items.length - 1 && StoriesLayout_1.IndexType.End) ||
        StoriesLayout_1.IndexType.InProccess;
    return (react_1.default.createElement(uikit_1.Modal, { open: open, onClose: handleClose, disableOutsideClick: disableOutsideClick, className: b(), contentClassName: b('modal-content', className) },
        react_1.default.createElement(StoriesLayout_1.StoriesLayout, { items: items, storyIndex: storyIndex, indexType: indexType, handleButtonClose: handleButtonClose, handleGotoNext: handleGotoNext, handleGotoPrevious: handleGotoPrevious, action: action })));
}
exports.Stories = Stories;
