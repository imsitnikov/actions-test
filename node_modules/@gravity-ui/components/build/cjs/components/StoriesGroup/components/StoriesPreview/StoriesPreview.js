"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoriesPreview = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const components_1 = require("../../../Stories/components");
const cn_1 = require("../../../utils/cn");
require("./StoriesPreview.css");
const PREVIEW_ITEM_SIZE = 40;
const PREVIEW_LIST_GAP = 8;
const b = (0, cn_1.block)('stories-group-preview');
const PreviewItem = ({ active, disabled, groupIndex, media, onSelectGroup }) => {
    const onClick = react_1.default.useCallback((event) => {
        event.preventDefault();
        event.stopPropagation();
        onSelectGroup === null || onSelectGroup === void 0 ? void 0 : onSelectGroup(groupIndex);
    }, [onSelectGroup, groupIndex]);
    return (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    react_1.default.createElement("div", { className: b('stories-preview-item', {
            active,
            disabled,
        }), onClick: onClick }, media && react_1.default.createElement(components_1.MediaRenderer, { media: media })));
};
const StoriesPreviewList = ({ groupIndex, groups, onGroupSelect, offset = 0, }) => {
    return (react_1.default.createElement(react_1.default.Fragment, null, groups.map(({ thumbnailMedia, items }, i) => {
        var _a;
        const media = thumbnailMedia || ((_a = items[0]) === null || _a === void 0 ? void 0 : _a.media);
        const currentGroupIndex = offset + i;
        return (react_1.default.createElement(PreviewItem, { key: i, groupIndex: currentGroupIndex, active: currentGroupIndex === groupIndex, disabled: items.length === 0, media: media, onSelectGroup: onGroupSelect }));
    })));
};
const StoriesPreviewListWithSlider = ({ groupIndex, groups, onGroupSelect, maxSliderItemsCount, }) => {
    const [offset, setOffset] = react_1.default.useState(0);
    react_1.default.useEffect(() => {
        const currentOffset = maxSliderItemsCount * Math.floor(groupIndex / maxSliderItemsCount);
        setOffset(currentOffset);
    }, [groupIndex, maxSliderItemsCount]);
    const setPreviewOffset = react_1.default.useCallback((event) => {
        event.preventDefault();
        event.stopPropagation();
        setOffset((currentOffset) => {
            return currentOffset - maxSliderItemsCount;
        });
    }, [maxSliderItemsCount]);
    const setNextOffset = react_1.default.useCallback((event) => {
        event.preventDefault();
        event.stopPropagation();
        setOffset((currentOffset) => {
            return currentOffset + maxSliderItemsCount;
        });
    }, [maxSliderItemsCount]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        groups.length > maxSliderItemsCount && (react_1.default.createElement("div", { className: b('slider-button-wrapper') }, offset !== 0 && (react_1.default.createElement(uikit_1.Button, { view: "raised", pin: "circle-circle", onClick: setPreviewOffset },
            react_1.default.createElement(uikit_1.Icon, { data: icons_1.ChevronLeft }))))),
        react_1.default.createElement("div", { className: b('slider-preview-list-wrapper'), style: {
                width: `${PREVIEW_ITEM_SIZE * maxSliderItemsCount +
                    PREVIEW_LIST_GAP * (maxSliderItemsCount - 1)}px`,
            } },
            react_1.default.createElement(StoriesPreviewList, { groupIndex: groupIndex, groups: groups.slice(offset, offset + maxSliderItemsCount), onGroupSelect: onGroupSelect, offset: offset })),
        groups.length > maxSliderItemsCount && (react_1.default.createElement("div", { className: b('slider-button-wrapper') }, offset < groups.length - maxSliderItemsCount && (react_1.default.createElement(uikit_1.Button, { view: "raised", pin: "circle-circle", onClick: setNextOffset },
            react_1.default.createElement(uikit_1.Icon, { data: icons_1.ChevronRight })))))));
};
// all onClick handlers of StoriesPreview childrens should have preventDefault() and stopPropagation() callings
const StoriesPreview = ({ groups, groupIndex, onGroupSelect, maxSliderItemsCount, onClose, }) => {
    const handleClose = react_1.default.useCallback((event) => {
        onClose === null || onClose === void 0 ? void 0 : onClose(event, 'outsideClick');
    }, [onClose]);
    if (groups.length < maxSliderItemsCount) {
        return (
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
        react_1.default.createElement("div", { className: b(), onClick: handleClose },
            react_1.default.createElement(StoriesPreviewList, { groupIndex: groupIndex, groups: groups, onGroupSelect: onGroupSelect })));
    }
    return (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    react_1.default.createElement("div", { className: b(), onClick: handleClose },
        react_1.default.createElement(StoriesPreviewListWithSlider, { maxSliderItemsCount: maxSliderItemsCount, groupIndex: groupIndex, groups: groups, onGroupSelect: onGroupSelect })));
};
exports.StoriesPreview = StoriesPreview;
