"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangelogDialog = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../utils/cn");
const ErrorContainer_1 = require("./components/ErrorContainer/ErrorContainer");
const Item_1 = require("./components/Item/Item");
const i18n_1 = require("./i18n");
require("./ChangelogDialog.css");
const b = (0, cn_1.block)('changelog-dialog');
let nextId = 1;
function getNextId() {
    return nextId++;
}
function ChangelogDialog({ open, title = (0, i18n_1.i18n)('title'), fullListLink, items, disableBodyScrollLock = true, disableOutsideClick, onClose, onStoryClick, onLinkClick, onRetryClick, loading, error, }) {
    const idRef = react_1.default.useRef();
    idRef.current = idRef.current || getNextId();
    const dialogCaptionId = `changelog-dialog-title-${idRef.current}`;
    return (react_1.default.createElement(uikit_1.Dialog, { className: b(), open: open, onClose: onClose, disableBodyScrollLock: disableBodyScrollLock, disableOutsideClick: disableOutsideClick, "aria-labelledby": dialogCaptionId },
        react_1.default.createElement(uikit_1.Dialog.Header, { caption: title, id: dialogCaptionId }),
        fullListLink ? (react_1.default.createElement(uikit_1.Dialog.Body, { key: "full-list-link" },
            react_1.default.createElement(uikit_1.Link, { href: fullListLink, target: "_blank" },
                react_1.default.createElement("span", null, (0, i18n_1.i18n)('link_full_list')),
                react_1.default.createElement("span", { className: b('full-list-link-icon') },
                    react_1.default.createElement(uikit_1.Icon, { data: icons_1.ArrowUpRightFromSquare, size: 14 }))))) : null,
        react_1.default.createElement(uikit_1.Dialog.Body, { key: "items", className: b('items-container') },
            loading && (react_1.default.createElement("div", { className: b('loading') },
                react_1.default.createElement(uikit_1.Loader, { size: 'm' }))),
            error && !loading && react_1.default.createElement(ErrorContainer_1.ErrorContainer, { error: error, onRetryClick: onRetryClick }),
            !error &&
                !loading &&
                (items.length > 0 ? (items.map((item, index) => (react_1.default.createElement(Item_1.Item, { key: index, className: b('item'), data: item, onStoryClick: onStoryClick, onLinkClick: onLinkClick })))) : (react_1.default.createElement("div", { className: b('empty-placeholder') }, (0, i18n_1.i18n)('label_empty')))))));
}
exports.ChangelogDialog = ChangelogDialog;
