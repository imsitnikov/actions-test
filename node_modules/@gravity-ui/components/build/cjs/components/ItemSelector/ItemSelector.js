"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemSelector = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../utils/cn");
const i18n_1 = require("./i18n");
require("./ItemSelector.css");
const b = (0, cn_1.block)('item-selector');
function getItemIdDefault(item) {
    return `${item}`;
}
class ItemSelector extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.renderItemTitle = (item) => {
            const { renderItemValue, getItemId } = this.props;
            if (renderItemValue) {
                return renderItemValue(item);
            }
            return getItemId(item);
        };
        this.renderItem = (item, active) => (react_1.default.createElement("div", { className: b('item', { active }) },
            react_1.default.createElement("span", { className: b('item-text') }, this.renderItemTitle(item)),
            react_1.default.createElement(uikit_1.Button, { view: "flat-secondary", size: "s", className: b('item-select'), onClick: this.onAddItem.bind(this, item) }, (0, i18n_1.i18n)('button_select'))));
        this.filterItem = (filter) => (item) => {
            const { getItemId } = this.props;
            return getItemId(item).includes(filter);
        };
        this.renderValueItem = (item, active) => (react_1.default.createElement("div", { className: b('value-item', { active }) },
            react_1.default.createElement("span", { className: b('value-item-text') }, this.renderItemTitle(item)),
            react_1.default.createElement(uikit_1.Button, { view: "flat-secondary", size: "s", className: b('value-item-remove'), onClick: () => this.onRemoveItem(item) },
                react_1.default.createElement(uikit_1.Icon, { data: icons_1.Xmark, size: 16 }))));
        this.onAddItem = (item) => {
            const { getItemId, value } = this.props;
            const itemId = getItemId(item);
            const usedItems = new Set(value);
            const newValue = usedItems.has(itemId) ? value : [...value, itemId];
            setTimeout(() => {
                this.onUpdate(newValue);
            }, 0);
        };
        this.onRemoveItem = (item) => {
            const { value, getItemId } = this.props;
            const itemId = getItemId(item);
            const newValue = value.filter((id) => id !== itemId);
            setTimeout(() => {
                this.onUpdate(newValue);
            }, 0);
        };
        this.onErase = () => {
            this.onUpdate([]);
        };
        this.onSelectAll = () => {
            const { items, getItemId } = this.props;
            const value = items.map(getItemId);
            this.onUpdate(value);
        };
        this.onMoveItem = ({ oldIndex, newIndex }) => {
            if (oldIndex !== newIndex) {
                const value = this.props.value.slice();
                this.onUpdate(uikit_1.List.moveListElement(value, oldIndex, newIndex));
            }
        };
        this.onUpdate = (value) => {
            this.props.onUpdate(value);
        };
    }
    getActualItems() {
        const { items, value, hideSelected, getItemId } = this.props;
        const actualItems = [];
        const selectedItems = new Array(value.length);
        const usedItems = new Map(value.map((id, index) => [id, index]));
        for (const item of items) {
            const selected = usedItems.get(getItemId(item));
            if (selected !== undefined) {
                selectedItems[selected] = item;
            }
            if (!hideSelected || selected === undefined) {
                actualItems.push(item);
            }
        }
        return [actualItems, selectedItems];
    }
    render() {
        const { value, selectorTitle, renderItem = this.renderItem, filterItem = this.filterItem, hideSelectAllButton, } = this.props;
        const [items, selected] = this.getActualItems();
        return (react_1.default.createElement("div", { className: b() },
            react_1.default.createElement("div", { className: b('list') },
                react_1.default.createElement("div", { className: b('list-header') },
                    react_1.default.createElement("span", { className: b('list-title') }, selectorTitle),
                    !hideSelectAllButton && (react_1.default.createElement(uikit_1.Button, { view: "flat", size: "s", disabled: items.length === 0, onClick: this.onSelectAll }, (0, i18n_1.i18n)('button_select-all')))),
                react_1.default.createElement(uikit_1.List, { items: items, renderItem: renderItem, filterItem: filterItem, filterPlaceholder: (0, i18n_1.i18n)('placeholder_search'), itemsHeight: 196 })),
            react_1.default.createElement("div", { className: b('list') },
                react_1.default.createElement("div", { className: b('list-header') },
                    react_1.default.createElement("span", { className: b('list-title') }, `${(0, i18n_1.i18n)('label_selected')}: ${value.length}`),
                    react_1.default.createElement(uikit_1.Button, { view: "flat", size: "s", disabled: value.length === 0, onClick: this.onErase }, (0, i18n_1.i18n)('button_deselect-all'))),
                react_1.default.createElement(uikit_1.List, { items: selected, renderItem: this.renderValueItem, filterItem: filterItem, filterPlaceholder: (0, i18n_1.i18n)('placeholder_search'), sortable: true, onSortEnd: this.onMoveItem, itemsHeight: 196 }))));
    }
}
exports.ItemSelector = ItemSelector;
ItemSelector.defaultProps = {
    hideSelected: true,
    selectorTitle: '',
    getItemId: getItemIdDefault,
};
