"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelayedTextInput = void 0;
const react_1 = __importDefault(require("react"));
const uikit_1 = require("@gravity-ui/uikit");
const useDelayedValue_1 = require("./hooks/useDelayedValue");
function DelayedTextInputComponent(props, ref) {
    const { value, onUpdate, delay } = props, textInputProps = __rest(props, ["value", "onUpdate", "delay"]);
    const { currentValue: textInputValue, delayedOnChange } = (0, useDelayedValue_1.useDelayedValue)(value, onUpdate, delay);
    // Without this proxy "native" input clear will synchronize value only after specified delay.
    const onChangeProxy = (event) => {
        var _a;
        if (props.hasClear && event.type === 'click' && event.target.value === '') {
            (_a = textInputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(textInputProps, event);
            onUpdate('');
        }
    };
    return (react_1.default.createElement(uikit_1.TextInput, Object.assign({}, textInputProps, { ref: ref, onChange: onChangeProxy, value: textInputValue, onUpdate: delayedOnChange })));
}
/***
 * Controlled input component. Property onUpdate is required in this component.
 */
exports.DelayedTextInput = react_1.default.forwardRef(DelayedTextInputComponent);
