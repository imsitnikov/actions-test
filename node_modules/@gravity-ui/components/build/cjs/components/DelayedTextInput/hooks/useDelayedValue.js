"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDelayedValue = void 0;
const react_1 = __importDefault(require("react"));
/**
 * Debounce-like hook to delay value update.
 *
 * @param value External value that will be eventually replaced by user input.
 * @param onChange Function to update value param after specified delay.
 * @param delay Time to wait after last delayedOnChange invocation before onChange is called.
 *
 * @example
 * const [searchTerm, setSearchTerm] = React.useState('');
 *
 * const {currentValue: userSearchTermInput, delayedOnChange: handleUserSearchTermInput} = useDelayedValue(searchTerm, setSearchTerm);
 */
function useDelayedValue(value, onChange, delay = 200) {
    const [currentValue, setCurrentValue] = react_1.default.useState(value);
    const timeoutRef = react_1.default.useRef();
    const delayedOnChange = react_1.default.useCallback((nextValue) => {
        setCurrentValue(nextValue);
        window.clearTimeout(timeoutRef.current);
        timeoutRef.current = window.setTimeout(() => {
            onChange(nextValue);
        }, delay);
    }, [delay, onChange]);
    react_1.default.useEffect(() => {
        setCurrentValue((currValue) => (currValue === value ? currValue : value));
    }, [value]);
    return {
        currentValue,
        delayedOnChange,
    };
}
exports.useDelayedValue = useDelayedValue;
