"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationWithSwipe = void 0;
const react_1 = __importDefault(require("react"));
const clamp_1 = __importDefault(require("lodash/clamp"));
const cn_1 = require("../utils/cn");
const HorizontalSwiper_1 = require("./HorizontalSwiper/HorizontalSwiper");
const Notification_1 = require("./Notification");
require("./Notification.css");
const b = (0, cn_1.block)('notification');
const notificationWrapperCls = b('notification-wrapper');
const swipeActionContainerCls = b('swipe-action-container');
exports.NotificationWithSwipe = react_1.default.memo(function NotificationWithSwipe(props) {
    var _a;
    const swipeThreshold = (_a = props.swipeThreshold) !== null && _a !== void 0 ? _a : 0.4;
    if (swipeThreshold < 0 || swipeThreshold > 1) {
        throw new Error('Invalid value for swipeThreshold');
    }
    const ref = react_1.default.useRef(null);
    const notification = props.notification;
    const swipeActions = notification.swipeActions;
    const leftAction = swipeActions && 'left' in swipeActions ? swipeActions.left : undefined;
    const rightAction = swipeActions && 'right' in swipeActions ? swipeActions.right : undefined;
    const [position, setPosition] = react_1.default.useState('notification');
    react_1.default.useEffect(() => {
        var _a, _b, _c, _d, _e;
        const element = ref.current;
        if (!element)
            return undefined;
        const actionsElements = Array.from(element.querySelectorAll(`.${swipeActionContainerCls}`));
        const notificationWrapperElement = element.querySelector(`.${notificationWrapperCls}`);
        const leftActionElement = leftAction ? actionsElements[0] : undefined;
        const rightActionElement = rightAction
            ? (_a = actionsElements[1]) !== null && _a !== void 0 ? _a : actionsElements[0]
            : undefined;
        if (!notificationWrapperElement)
            return () => { };
        const leftActionWidth = (_c = (_b = leftActionElement === null || leftActionElement === void 0 ? void 0 : leftActionElement.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0;
        const rightActionWidth = (_e = (_d = rightActionElement === null || rightActionElement === void 0 ? void 0 : rightActionElement.getBoundingClientRect()) === null || _d === void 0 ? void 0 : _d.width) !== null && _e !== void 0 ? _e : 0;
        //          |                  |                  |                |
        //          | <- rightActionX  | <- notificationX | <- leftActionX |
        //          |                  |                  |                |
        //  example | -200             | -100             | 0              |
        const leftActionX = 0;
        const notificationX = -leftActionWidth;
        const rightActionX = -leftActionWidth - rightActionWidth;
        const leftActionThresholdX = notificationX + leftActionWidth * swipeThreshold;
        const rightActionThresholdX = notificationX - rightActionWidth * swipeThreshold;
        let startX;
        if (position === 'left-action')
            startX = leftActionX;
        else if (position === 'notification')
            startX = notificationX;
        else
            startX = rightActionX;
        const swiper = new HorizontalSwiper_1.HorizontalSwiper(element);
        element.style.transform = `translateX(${startX}px)`;
        swiper.on('panstart', () => {
            notificationWrapperElement.style.opacity = `0.5`;
            element.style.transition = 'transform 0s';
        });
        swiper.on('panmove', () => {
            const x = getX();
            if (x === undefined)
                return;
            element.style.transform = `translateX(${x}px)`;
        });
        swiper.on('panend', () => {
            var _a, _b;
            element.style.transition = 'transform 0.2s';
            const x = getX();
            if (x === undefined) {
                if (position === 'notification') {
                    notificationWrapperElement.style.opacity = `1`;
                }
                return;
            }
            if (x >= leftActionThresholdX && leftAction) {
                setPosition('left-action');
                (_a = leftAction.onSwipe) === null || _a === void 0 ? void 0 : _a.call(leftAction);
                element.style.transform = `translateX(${leftActionX}px)`;
            }
            else if (x <= rightActionThresholdX && rightAction) {
                setPosition('right-action');
                (_b = rightAction.onSwipe) === null || _b === void 0 ? void 0 : _b.call(rightAction);
                element.style.transform = `translateX(${rightActionX}px)`;
            }
            else {
                setPosition('notification');
                element.style.transform = `translateX(${notificationX}px)`;
                notificationWrapperElement.style.opacity = `1`;
            }
        });
        function getX() {
            if (!swiper.getTouchMoveX)
                return undefined;
            return (0, clamp_1.default)(startX + swiper.getTouchMoveX, rightActionX, leftActionX);
        }
        return () => {
            swiper.destroy();
        };
    }, [leftAction, position, rightAction, swipeThreshold]);
    return (react_1.default.createElement("div", { className: b('swipe-wrap') },
        react_1.default.createElement("div", { ref: ref, className: b('swipe', {
                ['has-left']: Boolean(leftAction),
                ['has-right']: Boolean(rightAction),
                position,
            }) },
            leftAction ? renderAction(leftAction) : null,
            react_1.default.createElement("div", { className: notificationWrapperCls },
                react_1.default.createElement(Notification_1.Notification, Object.assign({}, props))),
            rightAction ? renderAction(rightAction) : null)));
});
function renderAction(action) {
    return react_1.default.createElement("div", { className: swipeActionContainerCls }, action.content);
}
