export interface Options {
    pressThreshold: number;
    velocityThreshold: number;
}
export interface Events {
    panend: MouseEvent | TouchEvent;
    panmove: MouseEvent | TouchEvent;
    panstart: MouseEvent | TouchEvent;
    swipeleft: MouseEvent | TouchEvent;
    swiperight: MouseEvent | TouchEvent;
}
export type Handler<E> = (event: E) => void;
export type Handlers = {
    [E in keyof Events]: Handler<Events[E]>[];
};
export declare class HorizontalSwiper<Element extends HTMLElement = HTMLElement> {
    touchMoveX: number | null;
    element: Element;
    private opts;
    private touchStartX;
    private touchStartY;
    private touchEndX;
    private touchEndY;
    private velocityX;
    private thresholdX;
    private disregardVelocityThresholdX;
    private swipedHorizontal;
    private handlers;
    private _onTouchStart;
    private _onTouchMove;
    private _onTouchEnd;
    constructor(elem: Element, options?: Partial<Options>);
    get getTouchMoveX(): number | null;
    destroy(): void;
    on<E extends keyof Events>(type: E, fn: Handler<Events[E]>): {
        type: E;
        fn: Handler<Events[E]>;
        cancel: () => void;
    } | undefined;
    off<E extends keyof Events>(type: E, fn: Handler<Events[E]>): void;
    fire<E extends keyof Events>(type: E, event: Events[E]): void;
    onTouchStart(event: MouseEvent | TouchEvent): void;
    onTouchMove(event: MouseEvent | TouchEvent): void;
    onTouchEnd(event: MouseEvent | TouchEvent): void;
    threshold(): number;
    disregardVelocityThreshold(self: HorizontalSwiper): number;
}
