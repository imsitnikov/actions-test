"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FoldableList = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../../utils/cn");
require("./FoldableList.css");
const b = (0, cn_1.block)('foldable-list');
const FoldableList = ({ items, className, isMobile, onChooseItem }) => {
    const direction = (0, uikit_1.useDirection)();
    const [checkedItems, setChecked] = react_1.default.useState(() => items.reduce((acc, item, index) => {
        if (item.checked) {
            acc.push(index);
        }
        return acc;
    }, []));
    const onCheckItem = (index) => {
        return () => {
            let newState;
            if (checkedItems.includes(index)) {
                newState = checkedItems.filter((intemIndex) => intemIndex !== index);
            }
            else {
                newState = [...checkedItems, index];
            }
            onChooseItem === null || onChooseItem === void 0 ? void 0 : onChooseItem(newState);
            setChecked(newState);
        };
    };
    return (react_1.default.createElement("div", { className: b(null, className) }, items.map(({ title, titleLabel, text, link, checked, disabled, defaultExpand }, index) => {
        const isChecked = checkedItems.includes(index);
        return (react_1.default.createElement(uikit_1.Disclosure, { key: index, size: "l", defaultExpanded: defaultExpand, className: b('item', { mobile: isMobile }) },
            react_1.default.createElement(uikit_1.Disclosure.Summary, null, ({ onClick, ariaControls, expanded }) => (react_1.default.createElement("div", { className: b('item-title-wrapper') },
                react_1.default.createElement(uikit_1.Checkbox, { className: b('item-checkbox', {
                        multiline: Boolean(titleLabel),
                    }), checked: checked || isChecked, size: "l", onChange: onCheckItem(index), disabled: disabled }),
                react_1.default.createElement("button", { type: "button", className: b('item-button'), onClick: onClick, "aria-controls": ariaControls, "aria-expanded": expanded },
                    react_1.default.createElement("div", { className: b('title') },
                        react_1.default.createElement("div", { className: b('title-text') },
                            react_1.default.createElement(uikit_1.Text, { className: b('title-text'), variant: "subheader-2" }, title),
                            titleLabel ? (react_1.default.createElement(uikit_1.Label, { className: b('title-label') }, titleLabel)) : null),
                        react_1.default.createElement(uikit_1.ArrowToggle, { className: b('title-arrow', {
                                multiline: Boolean(titleLabel),
                            }), direction: expanded ? 'top' : 'bottom', size: 20 })))))),
            react_1.default.createElement("div", { className: b('content') },
                react_1.default.createElement(uikit_1.Text, { variant: "body-2", className: b('content-text') }, text),
                link ? (react_1.default.createElement(uikit_1.Link, Object.assign({}, link, { className: b('content-link'), href: link.href, target: "_blank" }),
                    link.title,
                    react_1.default.createElement(uikit_1.Icon, { className: b('content-icon'), data: direction === 'rtl' ? icons_1.ChevronLeft : icons_1.ChevronRight, size: 16 }))) : null)));
    })));
};
exports.FoldableList = FoldableList;
