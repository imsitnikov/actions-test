"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsentPopup = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../../utils/cn");
const ConsentManager_1 = require("../../ConsentManager");
const i18n_1 = require("../../i18n");
const FoldableList_1 = require("../FoldableList/FoldableList");
const types_1 = require("./types");
require("./ConsentPopup.css");
const b = (0, cn_1.block)('consent-popup');
const Header = ({ currentStep, initialStep, onClose, onChangeStep, isMobile }) => {
    const direction = (0, uikit_1.useDirection)();
    const buttonsEnabled = currentStep === types_1.ConsentPopupStep.Manage;
    const isBackButtonVisible = buttonsEnabled && initialStep === types_1.ConsentPopupStep.Main;
    return (react_1.default.createElement("div", { className: b('header') },
        react_1.default.createElement("div", null,
            isBackButtonVisible ? (react_1.default.createElement(uikit_1.Button, { className: b('arrow-button'), view: "flat", size: "s", onClick: onChangeStep(types_1.ConsentPopupStep.Main) },
                react_1.default.createElement(uikit_1.Icon, { data: direction === 'rtl' ? icons_1.ArrowRight : icons_1.ArrowLeft, size: 16 }))) : null,
            react_1.default.createElement(uikit_1.Text, { className: b('title'), variant: buttonsEnabled && !isMobile ? 'body-3' : 'header-1' }, (0, i18n_1.i18n)(buttonsEnabled ? 'label_title_manage' : 'label_title_main'))),
        buttonsEnabled && !isBackButtonVisible ? (react_1.default.createElement(uikit_1.Button, { className: b('close-button'), view: "flat", size: "s", onClick: onClose },
            react_1.default.createElement(uikit_1.Icon, { data: icons_1.Xmark, size: 16 }))) : null));
};
const Footer = ({ onAction, currentStep, currentConsents, buttonAcceptText = (0, i18n_1.i18n)('button_accept_all'), buttonNecessaryText = (0, i18n_1.i18n)('button_necessary'), buttonConfirmText = (0, i18n_1.i18n)('button_confirm'), }) => {
    const isManageStep = currentStep === types_1.ConsentPopupStep.Manage;
    const onButtonClick = (onlyNecessary) => {
        return () => {
            onAction(onlyNecessary ? 'OnlyNecessary' : 'All');
        };
    };
    const confirmSelectedConsent = () => {
        onAction(currentConsents);
    };
    return (react_1.default.createElement("div", { className: b('buttons') },
        react_1.default.createElement(uikit_1.Button, { key: "reject", className: b('button'), onClick: onButtonClick(true), size: "l", view: "normal" }, buttonNecessaryText),
        react_1.default.createElement(uikit_1.Button, { key: "confirm", className: b('button'), onClick: isManageStep ? confirmSelectedConsent : onButtonClick(), size: "l", view: "action" }, isManageStep ? buttonConfirmText : buttonAcceptText)));
};
const ConsentPopup = (_a) => {
    var { policyLink, onAction, className, policyLinkText = (0, i18n_1.i18n)('label_policy_extended'), text, manageLabelText = (0, i18n_1.i18n)('manage_label_text_extended'), step = types_1.ConsentPopupStep.Main, cookieList, onClose, consentManager } = _a, buttonsParams = __rest(_a, ["policyLink", "onAction", "className", "policyLinkText", "text", "manageLabelText", "step", "cookieList", "onClose", "consentManager"]);
    const mobile = (0, uikit_1.useMobile)();
    const [currentConsents, setCurrentConsents] = react_1.default.useState(consentManager.getConsents());
    const [currentStep, setCurrentStep] = react_1.default.useState(step);
    const onChangeStep = (newStep) => {
        return () => setCurrentStep(newStep);
    };
    const isManageStep = currentStep === types_1.ConsentPopupStep.Manage;
    const preparedCookieList = react_1.default.useMemo(() => {
        return cookieList === null || cookieList === void 0 ? void 0 : cookieList.map((item) => {
            var _a, _b;
            const isNecessaryItem = item.type === ConsentManager_1.ConsentType.Necessary;
            return {
                checked: Boolean(currentConsents[item.type]),
                disabled: isNecessaryItem,
                defaultExpand: isNecessaryItem,
                title: item.title || (0, i18n_1.i18n)(`cookie_${item.type}_title`),
                text: item.text || (0, i18n_1.i18n)(`cookie_${item.type}_text`),
                link: item.link
                    ? {
                        href: (_a = item.link) === null || _a === void 0 ? void 0 : _a.href,
                        title: ((_b = item.link) === null || _b === void 0 ? void 0 : _b.title) || (0, i18n_1.i18n)(`cookie_link_text`),
                    }
                    : undefined,
                titleLabel: item.titleLabel,
            };
        });
    }, [cookieList, currentConsents]);
    const onChoose = (checkedItems) => {
        if (!cookieList)
            return;
        setCurrentConsents(cookieList.reduce((acc, item, index) => {
            acc[item.type] = checkedItems.includes(index);
            return acc;
        }, {}));
    };
    return (react_1.default.createElement(uikit_1.Modal, { open: true, disableOutsideClick: true, disableEscapeKeyDown: true, contentClassName: b('modal-content', { step: currentStep, mobile }), onClose: onClose },
        react_1.default.createElement("div", { className: b(null, className) },
            react_1.default.createElement(Header, { currentStep: currentStep, initialStep: step, onClose: onClose, onChangeStep: onChangeStep, isMobile: mobile }),
            react_1.default.createElement("div", { className: b('body', { step }) }, isManageStep ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(uikit_1.Text, { className: b('text'), variant: mobile ? 'header-1' : 'subheader-2' }, (0, i18n_1.i18n)('manage_subtitle_extended')),
                react_1.default.createElement("div", { className: b('text') },
                    manageLabelText,
                    policyLink && policyLinkText && (react_1.default.createElement(react_1.default.Fragment, null,
                        ' ',
                        react_1.default.createElement(uikit_1.Link, { href: policyLink, target: "_blank" }, policyLinkText))),
                    "."),
                preparedCookieList ? (react_1.default.createElement(FoldableList_1.FoldableList, { isMobile: mobile, className: b('cookie-list'), items: preparedCookieList, onChooseItem: onChoose })) : null)) : (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("div", { className: b('text') },
                    react_1.default.createElement("span", { dangerouslySetInnerHTML: {
                            __html: text ? text : (0, i18n_1.i18n)('label_text_extended'),
                        } })),
                react_1.default.createElement("div", { className: b('text') },
                    react_1.default.createElement(uikit_1.Button, { onClick: onChangeStep(types_1.ConsentPopupStep.Manage), view: "outlined-action" }, (0, i18n_1.i18n)('label_manage_cookie_link_text')))))),
            react_1.default.createElement(Footer, Object.assign({ currentStep: currentStep, onAction: onAction, currentConsents: currentConsents }, buttonsParams)))));
};
exports.ConsentPopup = ConsentPopup;
