import type { CookieSetOptions } from 'universal-cookie/cjs/types';
import type { IConsentManager, Subscriber } from './types';
export declare const COOKIE_NAME = "analyticsConsents";
export declare const CONSENT_COOKIE_SETTINGS: CookieSettings;
export declare enum ConsentType {
    Necessary = "necessary",
    Analytics = "analytics",
    Marketing = "marketing"
}
export declare enum ConsentMode {
    Notification = "notification",
    Manage = "manage",
    Base = "base"
}
export declare enum AdditionalConsentParams {
    Closed = "closed",
    Edition = "edition"
}
export type Consents = {
    [k in `${ConsentType | AdditionalConsentParams}`]?: boolean | number;
};
export type CookieSettings = CookieSetOptions;
export declare class ConsentManager implements IConsentManager {
    private consentMode;
    private consentEdition;
    private projectConsentEdition;
    private closed;
    private consents;
    private readonly cookieSettings;
    private readonly cookiesTypes;
    private readonly subscribers;
    constructor(mode: `${ConsentMode}`, edition?: number, cookieSettings?: CookieSetOptions);
    get mode(): "base" | "manage" | "notification";
    get cookies(): ConsentType[];
    get cookiesSettings(): CookieSetOptions;
    getConsents(): Consents;
    subscribe(handler: Subscriber): () => void;
    setConsents(values: Consents | 'All' | 'OnlyNecessary'): void;
    isConsentNotDefined(): boolean;
    private prepareConsent;
    private isAllConsentsDefined;
    private setInitValues;
    private saveNewCookieValue;
    private handleConsentChange;
}
