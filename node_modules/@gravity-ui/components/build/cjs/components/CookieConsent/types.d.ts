import type { ConsentMode, ConsentType, Consents, CookieSettings } from './ConsentManager';
import type { ConsentNotificationData } from './components/ConsentNotification';
import type { ConsentPopupData } from './components/ConsentPopup';
import type { SimpleConsentData } from './components/SimpleConsent';
export interface CookieConsentBaseProps {
    onAction: (consents: Consents | 'All' | 'OnlyNecessary') => void;
    className?: string;
    consentManager: IConsentManager;
}
export type CookieConsentComponentProps = ConsentNotificationData | ConsentPopupData | SimpleConsentData;
export type Subscriber = (changedConsents: Consents, allConsents: Consents) => void;
export interface IConsentManager {
    mode: `${ConsentMode}`;
    cookies: ConsentType[];
    cookiesSettings: CookieSettings;
    getConsents: () => Consents;
    subscribe: (handler: Subscriber) => () => void;
    setConsents: (values: Consents | 'All' | 'OnlyNecessary') => void;
    isConsentNotDefined: () => boolean;
}
export type CookieConsentProps = CookieConsentComponentProps & {
    consentManager: IConsentManager;
    onConsentPopupClose?: () => void;
    manageCookies?: boolean;
};
