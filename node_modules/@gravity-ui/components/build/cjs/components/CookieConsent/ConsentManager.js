"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsentManager = exports.AdditionalConsentParams = exports.ConsentMode = exports.ConsentType = exports.CONSENT_COOKIE_SETTINGS = exports.COOKIE_NAME = void 0;
const pick_1 = __importDefault(require("lodash/pick"));
const universal_cookie_1 = __importDefault(require("universal-cookie"));
exports.COOKIE_NAME = 'analyticsConsents';
exports.CONSENT_COOKIE_SETTINGS = {
    path: '/',
    maxAge: 60 * 60 * 24 * 365,
    secure: true,
    sameSite: true,
};
var ConsentType;
(function (ConsentType) {
    ConsentType["Necessary"] = "necessary";
    ConsentType["Analytics"] = "analytics";
    ConsentType["Marketing"] = "marketing";
})(ConsentType || (exports.ConsentType = ConsentType = {}));
var ConsentMode;
(function (ConsentMode) {
    ConsentMode["Notification"] = "notification";
    ConsentMode["Manage"] = "manage";
    ConsentMode["Base"] = "base";
})(ConsentMode || (exports.ConsentMode = ConsentMode = {}));
var AdditionalConsentParams;
(function (AdditionalConsentParams) {
    AdditionalConsentParams["Closed"] = "closed";
    AdditionalConsentParams["Edition"] = "edition";
})(AdditionalConsentParams || (exports.AdditionalConsentParams = AdditionalConsentParams = {}));
const cookies = new universal_cookie_1.default();
class ConsentManager {
    constructor(mode, edition, cookieSettings = exports.CONSENT_COOKIE_SETTINGS) {
        this.closed = false;
        this.consents = {};
        this.cookiesTypes = Object.values(ConsentType);
        this.subscribers = [];
        this.consentMode = mode;
        this.projectConsentEdition = edition;
        this.cookieSettings = cookieSettings;
        this.setInitValues();
    }
    get mode() {
        return this.consentMode;
    }
    get cookies() {
        return this.cookiesTypes;
    }
    get cookiesSettings() {
        return this.cookieSettings;
    }
    getConsents() {
        if (Object.keys(this.consents).length) {
            return this.consents;
        }
        return this.prepareConsent('OnlyNecessary');
    }
    subscribe(handler) {
        this.subscribers.push(handler);
        return () => {
            const index = this.subscribers.findIndex((value) => value === handler);
            if (index >= 0) {
                this.subscribers.splice(index, 1);
            }
        };
    }
    setConsents(values) {
        const consents = typeof values === 'string' ? this.prepareConsent(values) : values;
        const difference = Object.values(this.cookiesTypes).filter((type) => !consents[type] || consents[type] !== this.consents[type]);
        const differenceInVersion = this.consentEdition !== this.projectConsentEdition;
        const shouldClose = this.mode === ConsentMode.Notification && !this.closed;
        if (!difference.length && !differenceInVersion && !shouldClose) {
            return;
        }
        Object.assign(this.consents, consents);
        this.saveNewCookieValue();
        this.handleConsentChange((0, pick_1.default)(consents, difference));
    }
    isConsentNotDefined() {
        if (this.mode === ConsentMode.Notification && !this.closed) {
            return true;
        }
        return !this.isAllConsentsDefined() || this.projectConsentEdition !== this.consentEdition;
    }
    prepareConsent(value) {
        return this.cookiesTypes.reduce((acc, type) => {
            acc[type] = value === 'All' ? true : type === ConsentType.Necessary;
            return acc;
        }, {});
    }
    isAllConsentsDefined() {
        return Object.values(this.cookiesTypes).every((type) => typeof this.consents[type] === 'boolean');
    }
    setInitValues() {
        const value = cookies.get(exports.COOKIE_NAME);
        if (!(typeof value === 'object' && !Array.isArray(value) && value)) {
            return;
        }
        this.consents = Object.assign({}, (0, pick_1.default)(value, Object.values(ConsentType)));
        if (value[AdditionalConsentParams.Closed]) {
            this.closed = true;
        }
        if (value[AdditionalConsentParams.Edition]) {
            this.consentEdition = value.edition;
        }
    }
    saveNewCookieValue() {
        const newValue = Object.assign(Object.assign({}, this.consents), { [AdditionalConsentParams.Edition]: this.projectConsentEdition });
        this.consentEdition = this.projectConsentEdition;
        if (this.mode === ConsentMode.Notification) {
            newValue[AdditionalConsentParams.Closed] = true;
            this.closed = true;
            this.consents.closed = true;
        }
        cookies.set(exports.COOKIE_NAME, newValue, this.cookieSettings);
    }
    handleConsentChange(changedConsents) {
        const allConsents = this.getConsents();
        this.subscribers.forEach((handler) => handler(changedConsents, allConsents));
    }
}
exports.ConsentManager = ConsentManager;
