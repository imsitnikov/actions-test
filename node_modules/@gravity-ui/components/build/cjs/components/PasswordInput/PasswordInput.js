"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordInput = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../utils/cn");
const i18n_1 = require("./i18n");
const utils_1 = require("./utils");
require("./PasswordInput.css");
const b = (0, cn_1.block)('password-input');
const PasswordInput = (props) => {
    const { autoComplete, value, showCopyButton, rightContent, endContent, showRevealButton, size = 'm', hasCopyTooltip = true, hasRevealTooltip = true, controlProps, } = props;
    const [hideValue, setHideValue] = react_1.default.useState(true);
    const additionalEndContent = react_1.default.useMemo(() => {
        if (!showRevealButton && !showCopyButton) {
            return react_1.default.createElement(react_1.default.Fragment, null, endContent || rightContent);
        }
        const onClick = () => {
            setHideValue((hideValue) => !hideValue);
        };
        const { actionButtonSize, iconSize } = (0, utils_1.getActionButtonSizeAndIconSize)(size);
        return (react_1.default.createElement("div", { className: b('additional-right-content') },
            endContent || rightContent,
            value && showCopyButton ? (react_1.default.createElement(uikit_1.ClipboardButton, { view: "flat-secondary", text: value, hasTooltip: hasRevealTooltip, size: actionButtonSize, className: b('copy-button') })) : null,
            showRevealButton ? (react_1.default.createElement(uikit_1.ActionTooltip, { disabled: !hasCopyTooltip, title: hideValue ? (0, i18n_1.i18n)('label_show-password') : (0, i18n_1.i18n)('label_hide-password') },
                react_1.default.createElement(uikit_1.Button, { view: "flat-secondary", onClick: onClick, size: actionButtonSize, extraProps: {
                        'aria-label': hideValue
                            ? (0, i18n_1.i18n)('label_show-password')
                            : (0, i18n_1.i18n)('label_hide-password'),
                    } },
                    react_1.default.createElement(uikit_1.Icon, { data: hideValue ? icons_1.Eye : icons_1.EyeSlash, size: iconSize })))) : null));
    }, [
        showRevealButton,
        showCopyButton,
        endContent,
        rightContent,
        value,
        hasRevealTooltip,
        hasCopyTooltip,
        hideValue,
        size,
    ]);
    return (react_1.default.createElement(uikit_1.TextInput, Object.assign({}, props, { type: hideValue ? 'password' : 'text', endContent: additionalEndContent, autoComplete: autoComplete ? autoComplete : 'new-password', controlProps: Object.assign(Object.assign({}, controlProps), { className: b('input-control', controlProps === null || controlProps === void 0 ? void 0 : controlProps.className) }) })));
};
exports.PasswordInput = PasswordInput;
