import { __rest } from "tslib";
import React from 'react';
import { block } from '../../../utils/cn';
import { getListItemId } from '../../utils/getListItemId';
import { getGroupItemId } from '../../utils/groupItemId';
import { isTreeItemGuard } from '../../utils/isTreeItemGuard';
import './ListRecursiveRenderer.css';
const b = block('list-recursive-renderer');
// Saves the nested html structure for tree data structure
export function ListItemRecursiveRenderer(_a) {
    var { itemSchema, index, parentId } = _a, props = __rest(_a, ["itemSchema", "index", "parentId"]);
    const groupedId = getGroupItemId(index, parentId);
    const id = getListItemId({ item: itemSchema, groupedId, getItemId: props.getItemId });
    const node = props.children(id, props.idToFlattenIndex[id]);
    if (isTreeItemGuard(itemSchema) && itemSchema.children) {
        const isExpanded = props.expandedById && id in props.expandedById ? props.expandedById[id] : true;
        return (React.createElement("ul", { style: props.style, className: b(null, props.className), role: "group" },
            node,
            isExpanded &&
                itemSchema.children.map((item, index) => (React.createElement(ListItemRecursiveRenderer, Object.assign({ itemSchema: item, key: index, index: index, parentId: groupedId }, props))))));
    }
    return node;
}
