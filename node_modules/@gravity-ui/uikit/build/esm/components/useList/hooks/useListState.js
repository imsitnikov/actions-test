/* eslint-disable @typescript-eslint/no-non-null-assertion */
import React from 'react';
function useControlledState(value, defaultValue) {
    const [state, setState] = React.useState(value || defaultValue);
    return [value || state, setState];
}
export const useListState = ({ initialValues, controlledValues } = {}) => {
    const [disabledById, setDisabled] = useControlledState(controlledValues === null || controlledValues === void 0 ? void 0 : controlledValues.disabledById, (initialValues === null || initialValues === void 0 ? void 0 : initialValues.disabledById) || {});
    const [selectedById, setSelected] = useControlledState(controlledValues === null || controlledValues === void 0 ? void 0 : controlledValues.selectedById, (initialValues === null || initialValues === void 0 ? void 0 : initialValues.selectedById) || {});
    const [expandedById, setExpanded] = useControlledState(controlledValues === null || controlledValues === void 0 ? void 0 : controlledValues.expandedById, (initialValues === null || initialValues === void 0 ? void 0 : initialValues.expandedById) || {});
    const [activeItemId, setActiveItemId] = useControlledState(controlledValues === null || controlledValues === void 0 ? void 0 : controlledValues.activeItemId, initialValues === null || initialValues === void 0 ? void 0 : initialValues.activeItemId);
    return {
        disabledById,
        setDisabled,
        selectedById,
        setSelected,
        expandedById,
        setExpanded,
        activeItemId,
        setActiveItemId,
    };
};
