import type { InitialListParsedState, ListItemId, ListItemType, ListParsedState, ListState } from '../types';
export interface UseListProps<T> extends Partial<ListState> {
    items: ListItemType<T>[];
    /**
     * Control expanded items state from external source
     */
    getItemId?(item: T): ListItemId;
}
export type UseListResult<T> = ListParsedState<T> & {
    initialState: InitialListParsedState;
};
/**
 * Take array of items as a argument and returns parsed representation of this data structure to work with
 */
export declare const useList: <T>({ items, expandedById, getItemId }: UseListProps<T>) => UseListResult<T>;
