import React from 'react';
import { KeyCode } from '../../../constants';
import { findNextIndex } from '../utils/findNextIndex';
import { scrollToListItem } from '../utils/scrollToListItem';
// Use this hook if you need keyboard support for tree structure lists
export const useListKeydown = ({ visibleFlattenIds, onItemClick, containerRef, disabledById = {}, activeItemId, setActiveItemId, enabled, }) => {
    const activateItem = React.useCallback((index, scrollTo = true) => {
        if (typeof index === 'number' && visibleFlattenIds[index]) {
            if (scrollTo) {
                scrollToListItem(visibleFlattenIds[index], containerRef === null || containerRef === void 0 ? void 0 : containerRef.current);
            }
            setActiveItemId === null || setActiveItemId === void 0 ? void 0 : setActiveItemId(visibleFlattenIds[index]);
        }
    }, [containerRef, visibleFlattenIds, setActiveItemId]);
    const handleKeyMove = React.useCallback((event, step, defaultItemIndex = 0) => {
        event.preventDefault();
        const maybeIndex = visibleFlattenIds.findIndex((i) => i === activeItemId);
        const nextIndex = findNextIndex({
            list: visibleFlattenIds,
            index: (maybeIndex > -1 ? maybeIndex : defaultItemIndex) + step,
            step: Math.sign(step),
            disabledItems: disabledById,
        });
        activateItem(nextIndex);
    }, [activateItem, activeItemId, disabledById, visibleFlattenIds]);
    React.useLayoutEffect(() => {
        const anchor = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current;
        if (enabled || !anchor) {
            return undefined;
        }
        const handleKeyDown = (event) => {
            switch (event.key) {
                case KeyCode.ARROW_DOWN: {
                    handleKeyMove(event, 1, -1);
                    break;
                }
                case KeyCode.ARROW_UP: {
                    handleKeyMove(event, -1);
                    break;
                }
                case KeyCode.SPACEBAR:
                case KeyCode.ENTER: {
                    if (activeItemId && !disabledById[activeItemId]) {
                        event.preventDefault();
                        onItemClick === null || onItemClick === void 0 ? void 0 : onItemClick(activeItemId);
                    }
                    break;
                }
                default: {
                }
            }
        };
        anchor.addEventListener('keydown', handleKeyDown);
        return () => {
            anchor.removeEventListener('keydown', handleKeyDown);
        };
    }, [activeItemId, containerRef, disabledById, enabled, handleKeyMove, onItemClick]);
};
