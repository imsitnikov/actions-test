import { getListItemId } from './getListItemId';
import { getGroupItemId } from './groupItemId';
import { isTreeItemGuard } from './isTreeItemGuard';
export function flattenItems(items, expandedById = {}, getItemId) {
    const getNestedIds = (order, item, index, parentId) => {
        const groupedId = getGroupItemId(index, parentId);
        const id = getListItemId({ groupedId, item, getItemId });
        order.push(id);
        if (isTreeItemGuard(item) && item.children) {
            // don't include collapsed groups
            if (!(id in expandedById && !expandedById[id])) {
                order.push(...item.children.reduce((acc, item, idx) => getNestedIds(acc, item, idx, id), []));
            }
        }
        return order;
    };
    const visibleFlattenIds = items.reduce((acc, item, index) => getNestedIds(acc, item, index), []);
    const idToFlattenIndex = {};
    for (const [item, index] of visibleFlattenIds.entries()) {
        idToFlattenIndex[index] = item;
    }
    return {
        visibleFlattenIds,
        idToFlattenIndex,
    };
}
