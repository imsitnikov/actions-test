"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeList = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const hooks_1 = require("../../hooks");
const useList_1 = require("../useList");
const cn_1 = require("../utils/cn");
const TreeListContainer_1 = require("./components/TreeListContainer/TreeListContainer");
const b = (0, cn_1.block)('tree-list');
const TreeList = ({ qa, id, size = 'm', items, className, expandedById: propsExpandedById, disabledById: propsDisabledById, selectedById: propsSelectedById, activeItemId, defaultGroupsExpanded = true, getItemId, renderItem: propsRenderItem, renderContainer = TreeListContainer_1.TreeListContainer, onItemClick, multiple, setActiveItemId, containerRef: propsContainerRef, mapItemDataToProps, }) => {
    const uniqId = (0, hooks_1.useUniqId)();
    const treeListId = id !== null && id !== void 0 ? id : uniqId;
    const containerRefLocal = react_1.default.useRef(null);
    const containerRef = propsContainerRef !== null && propsContainerRef !== void 0 ? propsContainerRef : containerRefLocal;
    const listParsedState = (0, useList_1.useList)({
        items,
        getItemId,
        // used not all of all properties but it may be needed in future
        expandedById: propsExpandedById,
        disabledById: propsDisabledById,
        selectedById: propsSelectedById,
        activeItemId,
    });
    const expandedById = propsExpandedById || listParsedState.initialState.expandedById;
    const disabledById = propsDisabledById || listParsedState.initialState.disabledById;
    const selectedById = propsSelectedById || listParsedState.initialState.selectedById;
    const handleItemClick = react_1.default.useMemo(() => {
        if (onItemClick) {
            return (listItemId) => {
                onItemClick === null || onItemClick === void 0 ? void 0 : onItemClick({
                    id: listItemId,
                    index: listParsedState.idToFlattenIndex[listItemId],
                    data: listParsedState.itemsById[listItemId],
                    expanded: 
                    // eslint-disable-next-line no-nested-ternary
                    expandedById && listItemId in expandedById
                        ? expandedById[listItemId]
                        : listItemId in listParsedState.initialState.expandedById
                            ? listParsedState.initialState.expandedById[listItemId]
                            : defaultGroupsExpanded,
                    disabled: disabledById
                        ? Boolean(disabledById[listItemId])
                        : Boolean(listParsedState.initialState.disabledById[listItemId]),
                    selected: selectedById
                        ? Boolean(selectedById[listItemId])
                        : Boolean(listParsedState.initialState.selectedById[listItemId]),
                    context: {
                        isLastItem: listParsedState.visibleFlattenIds[listParsedState.visibleFlattenIds.length - 1] === listItemId,
                        groupState: listParsedState.groupsState[listItemId],
                        itemState: listParsedState.itemsState[listItemId],
                    },
                });
            };
        }
        return undefined;
    }, [
        defaultGroupsExpanded,
        disabledById,
        expandedById,
        selectedById,
        listParsedState,
        onItemClick,
    ]);
    (0, useList_1.useListKeydown)(Object.assign(Object.assign({ containerRef, onItemClick: handleItemClick }, listParsedState), { activeItemId,
        disabledById,
        setActiveItemId }));
    const renderItem = (itemId, index, renderContainerProps) => {
        const renderState = (0, useList_1.getItemRenderState)(Object.assign(Object.assign({ qa, id: itemId, size,
            multiple,
            mapItemDataToProps, onItemClick: handleItemClick }, listParsedState), { expandedById,
            disabledById,
            activeItemId,
            selectedById, defaultExpanded: defaultGroupsExpanded }));
        if (propsRenderItem) {
            return propsRenderItem({
                data: renderState.data,
                props: renderState.props,
                context: renderState.context,
                index,
                renderContainerProps,
            });
        }
        return react_1.default.createElement(useList_1.ListItemView, Object.assign({}, renderState.props, renderContainerProps));
    };
    // not JSX decl here is from weird `react-beautiful-dnd` render bug
    return renderContainer(Object.assign(Object.assign({ qa, id: `list-${treeListId}`, size,
        containerRef, className: b(null, className) }, listParsedState), { expandedById,
        disabledById,
        activeItemId,
        selectedById,
        renderItem,
        getItemId }));
};
exports.TreeList = TreeList;
