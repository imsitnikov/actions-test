"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Slider = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const debounce_1 = tslib_1.__importDefault(require("lodash/debounce"));
const theme_1 = require("../theme");
const cn_1 = require("../utils/cn");
const BaseSlider_1 = require("./BaseSlider/BaseSlider");
const SliderTooltip_1 = require("./SliderTooltip/SliderTooltip");
const utils_1 = require("./utils");
require("./Slider.css");
const b = (0, cn_1.block)('slider');
exports.Slider = react_1.default.forwardRef(function Slider({ value, defaultValue = 0, size = 'm', min = 0, max = 100, step = 1, marksCount = 2, availableValues, hasTooltip = false, errorMessage, validationState, disabled = false, debounceDelay = 0, onBlur, onUpdate, onUpdateComplete, onFocus, autoFocus = false, tabIndex, className, qa, apiRef, 'aria-label': ariaLabelForHandle, 'aria-labelledby': ariaLabelledByForHandle, }, ref) {
    const direction = (0, theme_1.useDirection)();
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const handleUpdate = react_1.default.useCallback((0, debounce_1.default)((changedValue) => onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(changedValue), debounceDelay), [onUpdate, debounceDelay]);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const handleUpdateComplete = react_1.default.useCallback((0, debounce_1.default)((changedValue) => onUpdateComplete === null || onUpdateComplete === void 0 ? void 0 : onUpdateComplete(changedValue), debounceDelay), [onUpdateComplete, debounceDelay]);
    react_1.default.useEffect(() => {
        return () => {
            handleUpdate.cancel();
            handleUpdateComplete.cancel();
        };
    }, [handleUpdate, handleUpdateComplete]);
    const innerState = (0, utils_1.prepareSliderInnerState)({
        availableValues,
        defaultValue,
        marksCount,
        max,
        min,
        step,
        value,
    });
    const stateModifiers = {
        size,
        error: validationState === 'invalid' && !disabled,
        disabled,
        hasTooltip: Boolean(hasTooltip),
        rtl: direction === 'rtl',
    };
    return (react_1.default.createElement("div", { className: b(null, className), ref: ref },
        react_1.default.createElement("div", { className: b('top', { size, hasTooltip }) }),
        react_1.default.createElement(BaseSlider_1.BaseSlider, { ref: apiRef, value: innerState.value, defaultValue: innerState.defaultValue, min: innerState.min, max: innerState.max, step: innerState.step, range: innerState.range, disabled: disabled, marks: innerState.marks, onBlur: onBlur, onFocus: onFocus, onChange: handleUpdate, onChangeComplete: handleUpdateComplete, stateModifiers: stateModifiers, 
            // eslint-disable-next-line jsx-a11y/no-autofocus
            autoFocus: autoFocus, tabIndex: tabIndex, "data-qa": qa, handleRender: hasTooltip
                ? (originHandle, handleProps) => {
                    var _a;
                    const styleProp = stateModifiers.rtl ? 'right' : 'left';
                    return (react_1.default.createElement(react_1.default.Fragment, null,
                        originHandle,
                        react_1.default.createElement(SliderTooltip_1.SliderTooltip, { value: handleProps.value, className: b('tooltip'), style: {
                                insetInlineStart: (_a = originHandle.props.style) === null || _a === void 0 ? void 0 : _a[styleProp],
                            }, stateModifiers: stateModifiers })));
                }
                : undefined, reverse: stateModifiers.rtl, ariaLabelForHandle: ariaLabelForHandle, ariaLabelledByForHandle: ariaLabelledByForHandle }),
        stateModifiers.error && errorMessage && (react_1.default.createElement("div", { className: b('error', { size }) }, errorMessage))));
});
