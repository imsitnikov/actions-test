"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTreeSelectSelection = exports.useValue = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const useOpenState_1 = require("../../../hooks/useSelect/useOpenState");
const useValue = ({ defaultValue, value: valueProps }) => {
    const [innerValue, setInnerValue] = react_1.default.useState(defaultValue || []);
    const value = valueProps || innerValue;
    const uncontrolled = !valueProps;
    const selected = react_1.default.useMemo(() => value.reduce((acc, value) => {
        acc[value] = true;
        return acc;
    }, {}), [value]);
    return {
        selected,
        value,
        /**
         * Available only if `uncontrolled` component valiant
         */
        setInnerValue: uncontrolled ? setInnerValue : undefined,
    };
};
exports.useValue = useValue;
const useTreeSelectSelection = ({ value, setInnerValue, defaultOpen, onClose, onOpenChange, open: openProps, onUpdate, }) => {
    const { toggleOpen, open } = (0, useOpenState_1.useOpenState)({
        defaultOpen,
        onClose,
        onOpenChange,
        open: openProps,
    });
    const handleSingleSelection = react_1.default.useCallback((id) => {
        if (!value.includes(id)) {
            const nextValue = [id];
            onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(nextValue);
            setInnerValue === null || setInnerValue === void 0 ? void 0 : setInnerValue(nextValue);
        }
        toggleOpen(false);
    }, [value, toggleOpen, onUpdate, setInnerValue]);
    const handleMultipleSelection = react_1.default.useCallback((id) => {
        const alreadySelected = value.includes(id);
        const nextValue = alreadySelected
            ? value.filter((iteratedVal) => iteratedVal !== id)
            : [...value, id];
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(nextValue);
        setInnerValue === null || setInnerValue === void 0 ? void 0 : setInnerValue(nextValue);
    }, [value, onUpdate, setInnerValue]);
    const handleClearValue = react_1.default.useCallback(() => {
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate([]);
        setInnerValue === null || setInnerValue === void 0 ? void 0 : setInnerValue([]);
    }, [onUpdate, setInnerValue]);
    return {
        open,
        toggleOpen,
        handleSingleSelection,
        handleMultipleSelection,
        handleClearValue,
    };
};
exports.useTreeSelectSelection = useTreeSelectSelection;
