import React from 'react';
import type { UseOpenProps } from '../../../hooks/useSelect/types';
import type { ListItemId } from '../../useList/types';
type UseValueProps = {
    value?: ListItemId[];
    defaultValue?: ListItemId[];
};
export declare const useValue: ({ defaultValue, value: valueProps }: UseValueProps) => {
    selected: Record<string, boolean>;
    value: string[];
    /**
     * Available only if `uncontrolled` component valiant
     */
    setInnerValue: React.Dispatch<React.SetStateAction<string[]>> | undefined;
};
type UseTreeSelectSelectionProps = {
    value: ListItemId[];
    setInnerValue?(ids: ListItemId[]): void;
    onUpdate?: (value: ListItemId[]) => void;
} & UseOpenProps;
export declare const useTreeSelectSelection: ({ value, setInnerValue, defaultOpen, onClose, onOpenChange, open: openProps, onUpdate, }: UseTreeSelectSelectionProps) => {
    open: boolean;
    toggleOpen: (val?: boolean | undefined) => void;
    handleSingleSelection: (id: ListItemId) => void;
    handleMultipleSelection: (id: ListItemId) => void;
    handleClearValue: () => void;
};
export {};
