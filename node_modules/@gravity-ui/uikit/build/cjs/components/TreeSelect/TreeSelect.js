"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeSelect = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const hooks_1 = require("../../hooks");
const components_1 = require("../Select/components");
const SelectPopup_1 = require("../Select/components/SelectPopup/SelectPopup");
const TreeList_1 = require("../TreeList");
const layout_1 = require("../layout");
const mobile_1 = require("../mobile");
const useList_1 = require("../useList");
const cn_1 = require("../utils/cn");
const useTreeSelectSelection_1 = require("./hooks/useTreeSelectSelection");
require("./TreeSelect.css");
const b = (0, cn_1.block)('tree-select');
const defaultItemRenderer = (renderState) => {
    return react_1.default.createElement(useList_1.ListItemView, Object.assign({}, renderState.props, renderState.renderContainerProps));
};
exports.TreeSelect = react_1.default.forwardRef(function TreeSelect({ id, qa, placement, slotBeforeListBody, slotAfterListBody, size, items, defaultOpen, width, containerRef: propsContainerRef, className, containerClassName, popupClassName, open: propsOpen, multiple, popupWidth, expandedById, disabledById, activeItemId, defaultValue, popupDisablePortal, groupsBehavior = 'expandable', value: propsValue, defaultGroupsExpanded, onClose, onUpdate, getItemId, onOpenChange, renderControl, renderItem = defaultItemRenderer, renderContainer, onItemClick, setActiveItemId: propsSetActiveItemId, mapItemDataToProps, title, }, ref) {
    const mobile = (0, mobile_1.useMobile)();
    const uniqId = (0, hooks_1.useUniqId)();
    const treeSelectId = id !== null && id !== void 0 ? id : uniqId;
    const controlWrapRef = react_1.default.useRef(null);
    const controlRef = react_1.default.useRef(null);
    const containerRefLocal = react_1.default.useRef(null);
    const containerRef = propsContainerRef !== null && propsContainerRef !== void 0 ? propsContainerRef : containerRefLocal;
    const handleControlRef = (0, hooks_1.useForkRef)(ref, controlRef);
    const { value, setInnerValue, selected } = (0, useTreeSelectSelection_1.useValue)({
        value: propsValue,
        defaultValue,
    });
    const listState = (0, useList_1.useListState)({
        controlledValues: {
            expandedById,
            disabledById,
            activeItemId,
            selectedById: selected,
        },
    });
    const setActiveItemId = propsSetActiveItemId !== null && propsSetActiveItemId !== void 0 ? propsSetActiveItemId : listState.setActiveItemId;
    const listParsedState = (0, useList_1.useList)(Object.assign({ items,
        getItemId }, listState));
    const wrappedOnUpdate = react_1.default.useCallback((ids) => onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(ids, ids.map((id) => listParsedState.itemsById[id])), [listParsedState.itemsById, onUpdate]);
    const { open, toggleOpen, handleClearValue, handleMultipleSelection, handleSingleSelection } = (0, useTreeSelectSelection_1.useTreeSelectSelection)({
        setInnerValue,
        value,
        onUpdate: wrappedOnUpdate,
        defaultOpen,
        open: propsOpen,
        onClose,
        onOpenChange,
    });
    const handleItemClick = react_1.default.useCallback((onClickProps) => {
        const { groupState } = onClickProps.context;
        const defaultHandleClick = () => {
            if (listState.disabledById[onClickProps.id])
                return;
            // always activate selected item
            setActiveItemId(onClickProps.id);
            if (groupState && groupsBehavior === 'expandable') {
                listState.setExpanded((prvState) => (Object.assign(Object.assign({}, prvState), { [onClickProps.id]: !onClickProps.expanded })));
            }
            else if (multiple) {
                handleMultipleSelection(onClickProps.id);
            }
            else {
                handleSingleSelection(onClickProps.id);
                toggleOpen(false);
            }
        };
        if (onItemClick) {
            return onItemClick(onClickProps, defaultHandleClick);
        }
        return defaultHandleClick();
    }, [
        onItemClick,
        listState,
        setActiveItemId,
        groupsBehavior,
        multiple,
        handleMultipleSelection,
        handleSingleSelection,
        toggleOpen,
    ]);
    // restoring focus when popup opens
    react_1.default.useLayoutEffect(() => {
        var _a;
        if (open) {
            const lastSelectedItemId = value[value.length - 1];
            (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            setActiveItemId(lastSelectedItemId);
            if (lastSelectedItemId) {
                (0, useList_1.scrollToListItem)(lastSelectedItemId, containerRef.current);
            }
        }
        // subscribe only in open event
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [open]);
    const handleClose = react_1.default.useCallback(() => toggleOpen(false), [toggleOpen]);
    const controlProps = {
        open,
        toggleOpen,
        clearValue: handleClearValue,
        ref: handleControlRef,
        size,
        value,
        id: treeSelectId,
        activeItemId: listState.activeItemId,
        title,
    };
    const togglerNode = renderControl ? (renderControl(controlProps)) : (react_1.default.createElement(components_1.SelectControl, Object.assign({}, controlProps, { selectedOptionsContent: react_1.default.Children.toArray(value.map((itemId) => mapItemDataToProps(listParsedState.itemsById[itemId]).title)).join(', '), view: "normal", pin: "round-round", popupId: `tree-select-popup-${treeSelectId}`, selectId: `tree-select-${treeSelectId}` })));
    const mods = Object.assign({}, (width === 'max' && { width }));
    const inlineStyles = {};
    if (typeof width === 'number') {
        inlineStyles.width = width;
    }
    return (react_1.default.createElement(layout_1.Flex, { direction: "column", gap: "5", ref: controlWrapRef, className: b(mods, className), style: inlineStyles },
        togglerNode,
        react_1.default.createElement(SelectPopup_1.SelectPopup, { ref: controlWrapRef, className: b('popup', { size }, popupClassName), controlRef: controlRef, width: popupWidth, placement: placement, open: open, handleClose: handleClose, disablePortal: popupDisablePortal, mobile: mobile, id: `tree-select-popup-${treeSelectId}` },
            slotBeforeListBody,
            react_1.default.createElement(TreeList_1.TreeList, { size: size, className: b('list', containerClassName), qa: qa, multiple: multiple, id: `list-${treeSelectId}`, containerRef: containerRef, getItemId: getItemId, disabledById: listState.disabledById, selectedById: listState.selectedById, expandedById: listState.expandedById, activeItemId: listState.activeItemId, setActiveItemId: setActiveItemId, onItemClick: handleItemClick, items: items, defaultGroupsExpanded: defaultGroupsExpanded, renderContainer: renderContainer, mapItemDataToProps: mapItemDataToProps, renderItem: renderItem !== null && renderItem !== void 0 ? renderItem : defaultItemRenderer }),
            slotAfterListBody)));
});
