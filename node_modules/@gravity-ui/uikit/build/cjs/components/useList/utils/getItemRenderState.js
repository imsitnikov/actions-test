"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItemRenderState = void 0;
const getListItemQa_1 = require("./getListItemQa");
/**
 * Map list state and parsed list state to item render props
 */
const getItemRenderState = ({ qa, itemsById, disabledById, expandedById, groupsState, onItemClick, mapItemDataToProps, visibleFlattenIds, size = 'm', itemsState, selectedById, activeItemId, multiple = false, defaultExpanded = true, id, }) => {
    var _a;
    const context = {
        itemState: itemsState[id],
        groupState: groupsState[id],
        isLastItem: id === visibleFlattenIds[visibleFlattenIds.length - 1],
    };
    let expanded; // `undefined` value means than tree list will look as nested list without groups
    let selected; // the absence of the value of the selected element affects its view. For example, an element without a value will not have a visual highlight on the hover
    // isGroup
    if (groupsState[id] && expandedById) {
        expanded = (_a = expandedById[id]) !== null && _a !== void 0 ? _a : defaultExpanded;
    }
    if (selectedById) {
        selected = Boolean(selectedById[id]);
    }
    const props = Object.assign({ id,
        size,
        expanded, active: id === activeItemId, indentation: context.itemState.indentation, disabled: Boolean(disabledById === null || disabledById === void 0 ? void 0 : disabledById[id]), selected, hasSelectionIcon: Boolean(multiple) && !context.groupState, onClick: onItemClick ? () => onItemClick(id) : undefined }, mapItemDataToProps(itemsById[id]));
    if (qa) {
        props.qa = (0, getListItemQa_1.getListItemQa)(qa, id);
    }
    return { data: itemsById[id], props, context };
};
exports.getItemRenderState = getItemRenderState;
