"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListItemView = exports.ListItemViewSlot = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const Icon_1 = require("../../../Icon");
const Text_1 = require("../../../Text");
const layout_1 = require("../../../layout");
const cn_1 = require("../../../utils/cn");
const constants_1 = require("../../constants");
require("./ListItemView.css");
const b = (0, cn_1.block)('list-item-view');
const ListItemViewSlot = (_a) => {
    var { children, indentation: indent = 1, className } = _a, props = tslib_1.__rest(_a, ["children", "indentation", "className"]);
    return (react_1.default.createElement(layout_1.Flex, Object.assign({ width: indent * 16, className: b('slot', className) }, props), children));
};
exports.ListItemViewSlot = ListItemViewSlot;
const renderSafeIndentation = (indentation) => {
    if (indentation && indentation >= 1) {
        return (react_1.default.createElement(exports.ListItemViewSlot, { indentation: Math.floor(indentation) }));
    }
    return null;
};
exports.ListItemView = react_1.default.forwardRef(function ListItemView(_a, ref) {
    var { id, as: asProps, size = 'm', active, selected, disabled, activeOnHover: propsActiveOnHover, className, hasSelectionIcon = true, indentation, startSlot, subtitle, endSlot, title, height, expanded, dragging, style, role = 'option', onClick: _onClick } = _a, rest = tslib_1.__rest(_a, ["id", "as", "size", "active", "selected", "disabled", "activeOnHover", "className", "hasSelectionIcon", "indentation", "startSlot", "subtitle", "endSlot", "title", "height", "expanded", "dragging", "style", "role", "onClick"]);
    const as = asProps || 'div';
    const isGroup = typeof expanded === 'boolean';
    const onClick = disabled ? undefined : _onClick;
    const activeOnHover = typeof propsActiveOnHover === 'boolean' ? propsActiveOnHover : Boolean(onClick);
    return (react_1.default.createElement(layout_1.Flex, Object.assign({ [constants_1.LIST_ITEM_DATA_ATR]: id, role: role, "aria-selected": selected, onClick: onClick, className: b({
            active: dragging || active,
            selected: selected && !hasSelectionIcon,
            activeOnHover,
            radius: size,
            dragging,
            clickable: Boolean(onClick),
        }, (0, layout_1.spacing)({ px: 2 }, className)), style: Object.assign({ minHeight: height !== null && height !== void 0 ? height : constants_1.modToHeight[size][Number(Boolean(subtitle))] }, style), as: as, ref: ref, alignItems: "center", gap: "4", justifyContent: "space-between" }, rest),
        react_1.default.createElement(layout_1.Flex, { gap: "2", alignItems: "center", grow: true },
            hasSelectionIcon && (react_1.default.createElement(exports.ListItemViewSlot // reserve space
            , null, selected ? (react_1.default.createElement(Icon_1.Icon, { data: icons_1.Check, size: 16, className: (0, Text_1.colorText)({ color: 'info' }) })) : null)),
            renderSafeIndentation(indentation),
            isGroup ? (react_1.default.createElement(Icon_1.Icon, { className: b('icon', (0, Text_1.colorText)({ color: disabled ? 'hint' : undefined })), data: expanded ? icons_1.ChevronDown : icons_1.ChevronUp, size: 16 })) : null,
            startSlot,
            react_1.default.createElement("div", { className: b('main-content') },
                typeof title === 'string' ? (react_1.default.createElement(Text_1.Text, { ellipsis: true, color: disabled ? 'hint' : undefined, variant: isGroup ? 'subheader-1' : undefined }, title)) : (title),
                typeof subtitle === 'string' ? (react_1.default.createElement(Text_1.Text, { ellipsis: true, color: disabled ? 'hint' : 'secondary' }, subtitle)) : (subtitle))),
        endSlot));
});
