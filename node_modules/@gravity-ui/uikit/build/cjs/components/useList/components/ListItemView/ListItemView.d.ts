import React from 'react';
import type { FlexProps } from '../../../layout';
import type { QAProps } from '../../../types';
import type { ListItemCommonProps, ListItemId, ListItemSize } from '../../types';
import './ListItemView.css';
export interface ListItemViewProps<T extends React.ElementType = 'div'> extends QAProps, ListItemCommonProps {
    /**
     * Ability to override default html tag
     */
    as?: T;
    /**
     * @default `m`
     */
    size?: ListItemSize;
    height?: number;
    selected?: boolean;
    active?: boolean;
    disabled?: boolean;
    /**
     * By default hovered elements has active styles. You can disable this behavior
     */
    activeOnHover?: boolean;
    /**
     * Build in indentation component to render nested views structure
     */
    indentation?: number;
    /**
     * Show selected icon if selected and reserve space for this icon
     */
    hasSelectionIcon?: boolean;
    /**
     * Note: if passed and `disabled` option is `true` click will not be appear
     */
    onClick?: React.ComponentPropsWithoutRef<T>['onClick'];
    style?: React.CSSProperties;
    className?: string;
    role?: React.AriaRole;
    expanded?: boolean;
    /**
     * Add active styles and change selection behavior during dnd is performing
     */
    dragging?: boolean;
    /**
     * `[${LIST_ITEM_DATA_ATR}="${id}"]` data attribute to find element.
     * For example for scroll to
     */
    id: ListItemId;
}
type ListItemViewRef<C extends React.ElementType> = React.ComponentPropsWithRef<C>['ref'];
type ListItemViewPropsWithTypedAttrs<T extends React.ElementType> = ListItemViewProps<T> & Omit<React.ComponentPropsWithoutRef<T>, keyof ListItemViewProps<T>>;
interface SlotProps extends FlexProps {
    indentation?: number;
}
export declare const ListItemViewSlot: ({ children, indentation: indent, className, ...props }: SlotProps) => React.JSX.Element;
export declare const ListItemView: <C extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">({ ref, ...props }: ListItemViewProps<C> & Omit<React.PropsWithoutRef<React.ComponentProps<C>>, keyof ListItemViewProps<T>> & {
    ref?: ListItemViewRef<C> | undefined;
}) => React.ReactElement;
export {};
