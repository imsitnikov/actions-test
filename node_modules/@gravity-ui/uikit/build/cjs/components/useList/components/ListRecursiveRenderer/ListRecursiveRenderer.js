"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListItemRecursiveRenderer = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const cn_1 = require("../../../utils/cn");
const getListItemId_1 = require("../../utils/getListItemId");
const groupItemId_1 = require("../../utils/groupItemId");
const isTreeItemGuard_1 = require("../../utils/isTreeItemGuard");
require("./ListRecursiveRenderer.css");
const b = (0, cn_1.block)('list-recursive-renderer');
// Saves the nested html structure for tree data structure
function ListItemRecursiveRenderer(_a) {
    var { itemSchema, index, parentId } = _a, props = tslib_1.__rest(_a, ["itemSchema", "index", "parentId"]);
    const groupedId = (0, groupItemId_1.getGroupItemId)(index, parentId);
    const id = (0, getListItemId_1.getListItemId)({ item: itemSchema, groupedId, getItemId: props.getItemId });
    const node = props.children(id, props.idToFlattenIndex[id]);
    if ((0, isTreeItemGuard_1.isTreeItemGuard)(itemSchema) && itemSchema.children) {
        const isExpanded = props.expandedById && id in props.expandedById ? props.expandedById[id] : true;
        return (react_1.default.createElement("ul", { style: props.style, className: b(null, props.className), role: "group" },
            node,
            isExpanded &&
                itemSchema.children.map((item, index) => (react_1.default.createElement(ListItemRecursiveRenderer, Object.assign({ itemSchema: item, key: index, index: index, parentId: groupedId }, props))))));
    }
    return node;
}
exports.ListItemRecursiveRenderer = ListItemRecursiveRenderer;
